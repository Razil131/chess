#include <SFML/Graphics.hpp>
#include "game.hpp"
#include "board.hpp"
#include "engine.hpp"
#include <iostream>

void vsPlayer(sf::RenderWindow& window,sf::Font& font){    // –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–≥—Ä—ã –ø—Ä–æ—Ç–∏–≤ –∏–≥—Ä–æ–∫–∞
    const float CELLSIZE = 100.f; // —Ä–∞–∑–º–µ—Ä –∫–ª–µ—Ç–∫–∏
    const float OFFSETX = 50.f; // –æ—Ç—Å—Ç–ø—É–ø –¥–ª—è –±—É–∫–≤ —Å–ª–µ–≤–∞
    const float OFFSETY = 50.f; // –æ—Ç—Å—Ç—É–ø –¥–ª—è —Ü–∏—Ñ—Ä —Å–Ω–∏–∑—É
    
    //–±—É–∫–≤—ã
    sf::Text letters[8];
    createLetters(letters, font, CELLSIZE, OFFSETX, OFFSETY);

    //—Ü–∏—Ñ—Ä—ã
    sf::Text numbers[8];
    createNumbers(numbers, font, CELLSIZE, OFFSETY);

    std::map<std::string, sf::Texture> textures; // –º–∞–ø–∞ —Ç–µ–∫—Å—Ç—É—Ä
    loadTextures(textures);
    Board* board = new Board();  // —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–≤–æ–µ–π –¥–æ—Å–∫–∏ (‚ùÅ¬¥‚ó°`‚ùÅ)
    board->initialize(textures); // —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä –Ω–∞ —Ç–≤–æ–µ–π –¥–æ—Å–∫–µ (‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª

    bool isFigureSelected = false; // —Ñ–∏–≥—É—Ä–∞ —Å–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è —Ö–æ–¥–∞
    figure* selectedFigure = nullptr; 
    std::vector<std::pair<int, int>> possibleMoves; // –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–∏–≥—É—Ä—ã

    bool endGameScreen=false; // –¥–æ–ª–∂–µ–Ω –ª–∏ –±—ã—Ç—å —ç–∫—Ä–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã?
    sf::RectangleShape newGameButtonRect; // –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã

    std::vector<sf::Sprite> to_choose; // —Å–ø—Ä–∞–π—Ç—ã —Ñ–∏–≥—É—Ä –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
    std::vector<sf::RectangleShape> rectangles_to_choose; // –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ –Ω–∞ –∑–∞–¥–Ω–µ–º –ø–ª–∞–Ω–µ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞

    sf::RectangleShape lastMoveFrom(sf::Vector2f(CELLSIZE, CELLSIZE)); // –∫–≤–∞–¥—Ä–∞—Ç–∏–∫ –æ—Ç–∫—É–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥
    sf::RectangleShape lastMoveTo(sf::Vector2f(CELLSIZE, CELLSIZE)); // –∫–≤–∞–¥—Ä–∞—Ç–∏–∫ –∫—É–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥
    lastMoveFrom.setFillColor(sf::Color(0, 255, 0, 80)); // —Ü–≤–µ—Ç
    lastMoveTo.setFillColor(sf::Color(0, 255, 0, 80)); // —Ü–≤–µ—Ç
    bool hasMoved = false; // —Ñ–ª–∞–≥ –±—ã–ª –ª–∏ —É–∂–µ —Ö–æ–¥ –∞ —Ç–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–≥–¥–∞ —Ö–æ–¥–∞ –Ω–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ —ç—Ç–∏ –∫–≤–∞–¥—Ä–∞—Ç—ã –ø—Ä–æ—Å—Ç–æ –Ω–∞ —É–≥–æ–ª —É–µ–∑–∂–∞–ª–∏ –∏ –∑–∞–∫—Ä—ã–≤–∞–ª–∏ —á–∞—Å—Ç—å –æ–∫–Ω–∞

    // —Å–æ–∑–¥–∞–µ–º –¥–æ—Å–∫—É
    sf::RectangleShape boardRectangles[8][8];
    initializeBoardRectangles(boardRectangles, CELLSIZE, OFFSETX, OFFSETY);

    while (window.isOpen()){
        processEvents(window, board, endGameScreen, newGameButtonRect, isFigureSelected, selectedFigure, possibleMoves, lastMoveFrom, lastMoveTo, textures, to_choose, rectangles_to_choose, hasMoved, OFFSETX, OFFSETY, CELLSIZE); // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∫–ª–∏–∫ –º—ã—à–∏ –∏ —Ç–¥

        window.clear(sf::Color(128,128,128)); // –æ—Ç—á–∏—â–∞–µ–º –æ–∫–Ω–æ —á—Ç–æ–±—ã –æ–Ω–æ –æ–±–Ω–æ–≤–ª—è–ª–æ—Å—å —Ü–≤–µ—Ç –≤ —Å–∫–æ–±–∫–∞—Ö —ç—Ç–æ —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ (—Å–µ—Ä—ã–π)

        drawBoardAndLabels(window, boardRectangles, letters, numbers); // —Ä–∏—Å—É–µ–º –¥–æ—Å–∫—É –∏ —Ü–∏—Ñ—Ä—ã –±—É–∫–≤—ã
        if (hasMoved) { // –µ—Å–ª–∏ —Ö–æ–¥ –±—ã–ª —Ä–∏—Å—É–µ–º –∑–µ–ª–µ–Ω—ã–µ –∫–≤–∞–¥—Ä–∞—Ç—ã –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ö–æ–¥—É
            window.draw(lastMoveFrom);
            window.draw(lastMoveTo);
        }
        if (board->isKingInCheck(figure::BLACK)){ // –µ—Å–ª–∏ –∫–∞–∫–æ–º—É –Ω–∏–±—É–¥—å –∫–æ—Ä–æ–ª—é —Å—Ç–æ–∏—Ç —à–∞—Ö –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∫—Ä–∞—Å–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç –Ω–∞ –Ω–µ–º
            drawCheck(window,board,figure::BLACK,OFFSETX,OFFSETY,CELLSIZE);
        }else if(board->isKingInCheck(figure::WHITE)){
            drawCheck(window,board,figure::WHITE,OFFSETX,OFFSETY,CELLSIZE);
        }

        drawFigures(window, board, CELLSIZE, OFFSETX, OFFSETY); // —Ä–∏—Å—É–µ–º —Ñ–∏–≥—É—Ä—ã

        if (board->isKingInMate(figure::WHITE)){ // –µ—Å–ª–∏ —É –∫–æ–≥–æ —Ç–æ –º–∞—Ç –∏–ª–∏ –ø–∞—Ç —Ä–∏—Å—É–µ–º —ç–∫—Ä–∞–Ω –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã
            drawEndGameScreen(window,figure::BLACK,font, newGameButtonRect); 
            endGameScreen=true;
        }else if(board->isKingInMate(figure::BLACK)){
            drawEndGameScreen(window,figure::WHITE,font, newGameButtonRect);
            endGameScreen=true;
        }else if (board->isKingInStalemate(figure::WHITE) or board->isKingInStalemate(figure::BLACK)){
            drawEndGameScreen(window,figure::NONE,font, newGameButtonRect);
            endGameScreen=true;
        }

        if (isFigureSelected) { // –µ—Å–ª–∏ —Ñ–∏–≥—É—Ä–∞ –≤—ã–±—Ä–∞–Ω–∞
            drawMoveHighlights(window, possibleMoves, *board, selectedFigure, OFFSETX, OFFSETY, CELLSIZE); // —Ä–∏—Å—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã
        }

        if (board->convertFlag){ // –µ—Å–ª–∏ –ø–µ—à–∫–∞ –Ω–∞ –∫–ª–µ—Ç–∫–µ –¥–ª—è –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è
            createChoiceMenu(board, to_choose, rectangles_to_choose, textures, OFFSETX, OFFSETY, CELLSIZE); // —Å–æ–∑–¥–∞–µ–º –∏ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
            drawChoiceMenu(window, to_choose, rectangles_to_choose);
        }

        window.display(); // –ø–æ–∫–∞–∑—ã–≤–∞–ª–æ—Å—å –æ–∫–Ω–æ —á—Ç–æ–±—ã
    }
    delete board; // –æ—Ç—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –æ—Ç —Ç–≤–æ–µ–π –¥–æ—Å–∫–∏ üò•üò•üò£üò£üò•
}

void vsComputer(sf::RenderWindow& window,sf::Font& font, figure::teams userTeam){// –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–≥—Ä—ã –ø—Ä–æ—Ç–∏–≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
    const float CELLSIZE = 100.f; // —Ä–∞–∑–º–µ—Ä –∫–ª–µ—Ç–∫–∏
    const float OFFSETX = 50.f; // –æ—Ç—Å—Ç–ø—É–ø –¥–ª—è –±—É–∫–≤ —Å–ª–µ–≤–∞
    const float OFFSETY = 50.f; // –æ—Ç—Å—Ç—É–ø –¥–ª—è —Ü–∏—Ñ—Ä —Å–Ω–∏–∑—É
    
    //–±—É–∫–≤—ã
    sf::Text letters[8];
    createLetters(letters, font, CELLSIZE, OFFSETX, OFFSETY);

    //—Ü–∏—Ñ—Ä—ã
    sf::Text numbers[8];
    createNumbers(numbers, font, CELLSIZE, OFFSETY);

    std::map<std::string, sf::Texture> textures; // –º–∞–ø–∞ —Ç–µ–∫—Å—Ç—É—Ä
    loadTextures(textures);
    Board* board = new Board();  // —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–≤–æ–µ–π –¥–æ—Å–∫–∏ (‚ùÅ¬¥‚ó°`‚ùÅ)
    board->initialize(textures); // —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä –Ω–∞ —Ç–≤–æ–µ–π –¥–æ—Å–∫–µ (‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª

    bool isFigureSelected = false; // —Ñ–∏–≥—É—Ä–∞ —Å–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è —Ö–æ–¥–∞
    figure* selectedFigure = nullptr; 
    std::vector<std::pair<int, int>> possibleMoves; // –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–∏–≥—É—Ä—ã

    bool endGameScreen=false; // –¥–æ–ª–∂–µ–Ω –ª–∏ –±—ã—Ç—å —ç–∫—Ä–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã?
    sf::RectangleShape newGameButtonRect; // –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã

    std::vector<sf::Sprite> to_choose; // —Å–ø—Ä–∞–π—Ç—ã —Ñ–∏–≥—É—Ä –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
    std::vector<sf::RectangleShape> rectangles_to_choose; // –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ –Ω–∞ –∑–∞–¥–Ω–µ–º –ø–ª–∞–Ω–µ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞

    sf::RectangleShape lastMoveFrom(sf::Vector2f(CELLSIZE, CELLSIZE)); // –∫–≤–∞–¥—Ä–∞—Ç–∏–∫ –æ—Ç–∫—É–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥
    sf::RectangleShape lastMoveTo(sf::Vector2f(CELLSIZE, CELLSIZE)); // –∫–≤–∞–¥—Ä–∞—Ç–∏–∫ –∫—É–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥
    lastMoveFrom.setFillColor(sf::Color(0, 255, 0, 80)); // —Ü–≤–µ—Ç
    lastMoveTo.setFillColor(sf::Color(0, 255, 0, 80)); // —Ü–≤–µ—Ç
    bool hasMoved = false; // —Ñ–ª–∞–≥ –±—ã–ª –ª–∏ —É–∂–µ —Ö–æ–¥ –∞ —Ç–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–≥–¥–∞ —Ö–æ–¥–∞ –Ω–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ —ç—Ç–∏ –∫–≤–∞–¥—Ä–∞—Ç—ã –ø—Ä–æ—Å—Ç–æ –Ω–∞ —É–≥–æ–ª —É–µ–∑–∂–∞–ª–∏ –∏ –∑–∞–∫—Ä—ã–≤–∞–ª–∏ —á–∞—Å—Ç—å –æ–∫–Ω–∞

    // —Å–æ–∑–¥–∞–µ–º –¥–æ—Å–∫—É
    sf::RectangleShape boardRectangles[8][8];
    initializeBoardRectangles(boardRectangles, CELLSIZE, OFFSETX, OFFSETY);
    Engine engine;
    const char* enginePath = "..\\stockfish\\stockfish-windows-x86-64-avx2.exe"; //—Ç—Ä–∞–∏–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–≤–∏–∂–æ–∫
    if (!engine.launch(enginePath)) {
        std::cerr << "ERROR: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–≤–∏–∂–æ–∫ –ø–æ –ø—É—Ç–∏ `" << enginePath << "`\n";
        delete board;
        return;
    }
    engine.sendCommand("uci"); //–≤–∫–ª—é—á–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª UCI üòé
    engine.sendCommand("isready"); //–ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
    //engine.sendCommand("position fen 4k3/8/8/8/8/8/PPPPPPPP/4K3 w - - 0 1");
    while (window.isOpen()) { // –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –ø–æ–∫–∞ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ
        if (board->getCurrentTeam() != userTeam) { //–ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–≥–¥–∞ —Ö–æ–¥–∏—Ç –±–æ—Ç
            std::string moves; 
            for (const auto& move : board->movesUCI) { //–ø–µ—Ä–µ–≤–æ–¥–∏–º —Ö–æ–¥—ã –∏–∑ –Ω–∞—à–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –µ2–µ4 —É—Å–ª–æ–≤–Ω—ã–µ
                moves += move + " ";
            }

            engine.sendCommand("position startpos moves " + moves); //–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–≤–∏–∂–∫—É
            engine.sendCommand("go movetime 1000"); //–¥–∞–µ–º –ø–æ–¥—É–º–∞—Ç—å —Å–µ–∫—É–Ω–¥—É, –ø–æ –∏–¥–µ–µ —Ç—É—Ç –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ –¥–∏—Ñ

            std::string bestmove;//–ø–æ–ª—É—á–∞–µ–º –ª—É—á—à–∏–π —Ö–æ–¥
            do {
                auto resp = engine.readLine();
                if (resp.find("bestmove") != std::string::npos) {
                size_t start = resp.find("bestmove") + 9;
                size_t end = resp.find(' ', start);
                bestmove = (end == std::string::npos) ? resp.substr(start) : resp.substr(start, end - start);
                }
            } while (bestmove.empty());

            if (bestmove == "resign") {
                endGameScreen=true; // —á–µ—Ç –Ω–∞–ø–∏—Å–∞–ª –∫–æ–≥–¥–∞ —Å–¥–∞–µ—Ç—Å—è –Ω–æ —Ö–∑ –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –Ω–æ –≤—Ä–æ–¥–µ –¥–æ–ª–∂–Ω–æ
                drawEndGameScreen(window,userTeam, font, newGameButtonRect);
            }

            //–ø–∞—Ä—Å–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            int fx, fy, tx, ty;
            char prom = '\0';
            if (bestmove.length() >= 4) {
                fx = bestmove[0] - 'a';
                fy = bestmove[1] - '1';
                tx = bestmove[2] - 'a';
                ty = bestmove[3] - '1';
                
                if (bestmove.length() >= 5) {// —Å–∏–º–≤–æ–ª –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è
                    prom = bestmove[4];
                    }
                } 
                
                board->makeMove({fx, fy}, {tx, ty});//–≤—ã–ø–æ–ª–Ω—è–µ–º —Ö–æ–¥

                
                if (prom != '\0') {
                figure::figureTypes newType;
                switch (prom) {
                    case 'r': newType = figure::ROOK; break;
                    case 'b': newType = figure::BISHOP; break;
                    case 'n': newType = figure::KNIGHT; break;
                    case 'q': 
                    default: newType = figure::QUEEN;
                }

                std::string teamChar = (userTeam == figure::WHITE) ? "b" : "w"; //–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –±–æ—Ç–∞
                std::string textureName;
                switch (newType) {
                    case figure::QUEEN: textureName = "q" + teamChar; break;
                    case figure::ROOK: textureName = "r" + teamChar; break;
                    case figure::BISHOP: textureName = "b" + teamChar; break;
                    case figure::KNIGHT: textureName = "n" + teamChar; break;
                    default: textureName = "q" + teamChar;
                }

                board->convertPawn(tx, ty, newType, textures[textureName]); //–ø—Ä–µ–≤—Ä–∞—â–∞–µ–º
                

                board->convertFlag = false;
            }
        }
        processEvents(window, board, endGameScreen, newGameButtonRect, isFigureSelected, selectedFigure, possibleMoves, lastMoveFrom, lastMoveTo, textures, to_choose, rectangles_to_choose, hasMoved, OFFSETX, OFFSETY, CELLSIZE); // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∫–ª–∏–∫ –º—ã—à–∏ –∏ —Ç–¥

        

        window.clear(sf::Color(128,128,128)); // –æ—Ç—á–∏—â–∞–µ–º –æ–∫–Ω–æ —á—Ç–æ–±—ã –æ–Ω–æ –æ–±–Ω–æ–≤–ª—è–ª–æ—Å—å —Ü–≤–µ—Ç –≤ —Å–∫–æ–±–∫–∞—Ö —ç—Ç–æ —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ (—Å–µ—Ä—ã–π)

        drawBoardAndLabels(window, boardRectangles, letters, numbers); // —Ä–∏—Å—É–µ–º –¥–æ—Å–∫—É –∏ —Ü–∏—Ñ—Ä—ã –±—É–∫–≤—ã
        if (hasMoved) { // –µ—Å–ª–∏ —Ö–æ–¥ –±—ã–ª —Ä–∏—Å—É–µ–º –∑–µ–ª–µ–Ω—ã–µ –∫–≤–∞–¥—Ä–∞—Ç—ã –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ö–æ–¥—É
            window.draw(lastMoveFrom);
            window.draw(lastMoveTo);
        }
        if (board->isKingInCheck(figure::BLACK)){ // –µ—Å–ª–∏ –∫–∞–∫–æ–º—É –Ω–∏–±—É–¥—å –∫–æ—Ä–æ–ª—é —Å—Ç–æ–∏—Ç —à–∞—Ö –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∫—Ä–∞—Å–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç –Ω–∞ –Ω–µ–º
            drawCheck(window,board,figure::BLACK,OFFSETX,OFFSETY,CELLSIZE);
        }else if(board->isKingInCheck(figure::WHITE)){
            drawCheck(window,board,figure::WHITE,OFFSETX,OFFSETY,CELLSIZE);
        }

        drawFigures(window, board, CELLSIZE, OFFSETX, OFFSETY); // —Ä–∏—Å—É–µ–º —Ñ–∏–≥—É—Ä—ã

        

        if (board->isKingInMate(figure::WHITE)){ // –µ—Å–ª–∏ —É –∫–æ–≥–æ —Ç–æ –º–∞—Ç –∏–ª–∏ –ø–∞—Ç —Ä–∏—Å—É–µ–º —ç–∫—Ä–∞–Ω –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã
            drawEndGameScreen(window,figure::BLACK,font, newGameButtonRect); 
            endGameScreen=true;
        }else if(board->isKingInMate(figure::BLACK)){
            drawEndGameScreen(window,figure::WHITE,font, newGameButtonRect);
            endGameScreen=true;
        }else if (board->isKingInStalemate(figure::WHITE) or board->isKingInStalemate(figure::BLACK)){
            drawEndGameScreen(window,figure::NONE,font, newGameButtonRect);
            endGameScreen=true;
        }

        if (isFigureSelected) { // –µ—Å–ª–∏ —Ñ–∏–≥—É—Ä–∞ –≤—ã–±—Ä–∞–Ω–∞
            drawMoveHighlights(window, possibleMoves, *board, selectedFigure, OFFSETX, OFFSETY, CELLSIZE); // —Ä–∏—Å—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã
        }

        if (board->convertFlag && board->getCurrentTeam() == userTeam){ // –µ—Å–ª–∏ –ø–µ—à–∫–∞ –Ω–∞ –∫–ª–µ—Ç–∫–µ –¥–ª—è –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è
            createChoiceMenu(board, to_choose, rectangles_to_choose, textures, OFFSETX, OFFSETY, CELLSIZE); // —Å–æ–∑–¥–∞–µ–º –∏ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
            drawChoiceMenu(window, to_choose, rectangles_to_choose);
        }

        window.display(); // –ø–æ–∫–∞–∑—ã–≤–∞–ª–æ—Å—å –æ–∫–Ω–æ —á—Ç–æ–±—ã
        
    }
    delete board; // –æ—Ç—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –æ—Ç —Ç–≤–æ–µ–π –¥–æ—Å–∫–∏ üò•üò•üò£üò£üò•
    engine.stop();
}

int main() {
    sf::RenderWindow window(sf::VideoMode(900, 900), "Chess", sf::Style::Titlebar | sf::Style::Close); // —Å–æ–∑–¥–∞–µ–º –æ–∫–æ—à–µ—á–Ω–æ —Ç–∞–∫ —Å–∫–∞–∑–∞—Ç—å 900 –Ω–∞ 900 –ø–∏–∫—Å–µ–ª–µ–π —Å –Ω–∞–∑–≤–∞–Ω–∏–µ Chess

    sf::Font font; // —à—Ä–∏—Ñ—Ç
    if (!loadFont(font)) {
        return -1; // –µ—Å–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è —Ç–æ :(
    }

    enum MainMenuModes {MainMenu, Puzzles, ModeChoose ,EnemyChoose, TeamChoose, DEBUG}; // —ç–∫—Ä–∞–Ω—ã –≤ –º–µ–Ω—é –ß–¢–û–ë–´ –û–¢–ö–õ–Æ–ß–ò–¢–¨ –ú–ï–ù–Æ DEBUG
    
    MainMenuModes currentMode = MainMenu; // –∑–∞–º–µ–Ω–∏—Ç—å MainMenu –Ω–∞ DEBUG –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –º–µ–Ω—é –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –Ω–∏–∂–µ
    int mode = 1; //—Ç—É—Ç –ø–æ –∏–¥–µ–µ –º—ã –¥–µ–ª–∞–µ–º –æ—Ç –æ–¥–Ω–æ–≥–æ –¥–æ 3, –≥–¥–µ 1 - –¥–µ—Ñ–ª–æ—Ç —à–∞—Ö–º–∞—Ç—ã, 2 - —Ñ–∏—à–µ—Ä, 3 - –¥–æ 3 —à–∞—Ö–æ–≤
    int player = 1; //–µ—Å–ª–∏ 1 - –∏–≥—Ä–∞ —Å –∫–æ–º–ø–æ–º, –µ—Å–ª–∏ 2 - –¥–≤–∞ –∏–≥—Ä–æ–∫–∞
    int dif = 1; //TODO –ø–æ—Ç–æ–º switch case —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ–±—ã –≤—ã–±–∏—Ä–∞—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å
    figure::teams userTeam = figure::WHITE; 
    bool needToQuitMenuFlag = false;

    std::map<std::string,sf::RectangleShape> menuButtonsRects; // –º–∞–ø–∞ –∫–Ω–æ–ø–æ–∫ –∏ –∏—Ö id –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    sf::RectangleShape backBtn; // –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ 
    sf::RectangleShape createPuzzleBtn; // –∫–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    std::string clickedButtonID; // –∏ id –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω–∞–∂–∞–ª–∏
    while (window.isOpen()){ // –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–ª—è –º–µ–Ω—é –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –º–µ–Ω—é –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∏–≥—Ä–∞
        if (currentMode == DEBUG) // –µ—Å–ª–∏ DEBUG —Ç–æ —Å—Ä–∞–∑—É –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é
            break;
        window.clear(sf::Color(128,128,128));
        if (currentMode == MainMenu){ // –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–µ–º –Ω—É–∂–Ω–æ–µ –º–µ–Ω—é
            drawMainMenu(window,menuButtonsRects,font);
        }
        else if (currentMode == ModeChoose){
            drawGameTypeMenu(window,menuButtonsRects,backBtn,font);
        }
        else if (currentMode == Puzzles){
            drawPuzzleMenu(window,menuButtonsRects,backBtn,createPuzzleBtn,font,150);
        }
        else if (currentMode == EnemyChoose){
            drawOpponentMenu(window,menuButtonsRects,backBtn,font);
        }
        else if (currentMode == TeamChoose){
            drawColorMenu(window,menuButtonsRects,backBtn,font);
        }
        sf::Event event;  // –∫–∞–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–µ–π—á–∞—Å –∫–ª–∏–∫ –º—ã—à–∏ –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–æ
        while (window.pollEvent(event)){ // –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Å–æ–±—ã—Ç–∏–µ –∫–∞–∫–æ–µ —Ç–æ
            clickedButtonID = ""; // –æ–±–Ω—É–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞ —Ç–æ back –º–æ–∂–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –Ω–∞–∂–∞—Ç—å—Å—è –ø—Ä–∏ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–º –Ω–∞–∂–∞—Ç–∏–∏
            handleWindowClose(window, event); // —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã–≤–∞–ª–æ—Å—å –æ–∫–Ω–æ
            if (event.type == sf::Event::MouseButtonPressed && // –Ω–∞–∂–∞—Ç–∏–µ –ª–µ–≤–æ–π –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏
                event.mouseButton.button == sf::Mouse::Left) {
                sf::Vector2f mousePos(event.mouseButton.x, event.mouseButton.y); // –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
                if (backBtn.getGlobalBounds().contains(mousePos)){ 
                    clickedButtonID = "back";
                }
                else{
                    for (auto& [id, rect] : menuButtonsRects) { // –ø–æ –≤—Å–µ–º—É —Å–ø–∏—Å–∫—É –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è
                        if (rect.getGlobalBounds().contains(mousePos)){
                            clickedButtonID = id;
                        }
                    } 
                }
            }
            if (clickedButtonID == "exit"){
                window.close();
            }
            else if (clickedButtonID == "play"){
                currentMode = ModeChoose;
            }
            else if (clickedButtonID == "puzzles"){
                currentMode = Puzzles;
            }
            else if (clickedButtonID == "classic"){
                mode = 1;
                currentMode = EnemyChoose;
            }
            else if (clickedButtonID == "fischer"){
                mode = 2;
                currentMode = EnemyChoose;
            }
            else if (clickedButtonID == "three"){
                mode = 3;
                currentMode = EnemyChoose;
            }
            else if (clickedButtonID == "pve"){
                player = 1;
                currentMode = TeamChoose;
            }
            else if (clickedButtonID == "pvp"){
                player = 2;
                needToQuitMenuFlag = true;
                break;
            }
            else if (clickedButtonID == "black"){
                userTeam = figure::BLACK;
                needToQuitMenuFlag = true;
                break;
            }
            else if (clickedButtonID == "white"){
                userTeam = figure::WHITE;
                needToQuitMenuFlag = true;
                break;
            }
            else if (clickedButtonID == "back"){
                if (currentMode == ModeChoose)
                    currentMode = MainMenu;
                else if (currentMode == Puzzles)
                    currentMode = MainMenu;
                else if (currentMode == EnemyChoose)
                    currentMode = ModeChoose;
                else if (currentMode == TeamChoose)
                    currentMode = EnemyChoose;
                else if (currentMode == TeamChoose)
                    currentMode = EnemyChoose;
            }
        }
        window.display();
        if (needToQuitMenuFlag)
            break;
    }
    if (player == 1 and mode == 1) // –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥—Ö–æ–¥—è—â–∏—é –ø–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        vsComputer(window,font,userTeam);
    else if (player == 2 and mode == 1)
        vsPlayer(window,font);
    return 0;
}