#include "modes.hpp"

void vsPlayerStandart(sf::RenderWindow& window,sf::Font& font, std::string savefile){    // –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–≥—Ä—ã –ø—Ä–æ—Ç–∏–≤ –∏–≥—Ä–æ–∫–∞
    const float CELLSIZE = 100.f; // —Ä–∞–∑–º–µ—Ä –∫–ª–µ—Ç–∫–∏
    const float OFFSETX = 50.f; // –æ—Ç—Å—Ç–ø—É–ø –¥–ª—è –±—É–∫–≤ —Å–ª–µ–≤–∞
    const float OFFSETY = 50.f; // –æ—Ç—Å—Ç—É–ø –¥–ª—è —Ü–∏—Ñ—Ä —Å–Ω–∏–∑—É
    
    //–±—É–∫–≤—ã
    sf::Text letters[8];
    createLetters(letters, font, CELLSIZE, OFFSETX, OFFSETY);

    //—Ü–∏—Ñ—Ä—ã
    sf::Text numbers[8];
    createNumbers(numbers, font, CELLSIZE, OFFSETY);

    std::map<std::string, sf::Texture> textures; // –º–∞–ø–∞ —Ç–µ–∫—Å—Ç—É—Ä
    loadTextures(textures);
    Board* board = new Board();  // —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–≤–æ–µ–π –¥–æ—Å–∫–∏ (‚ùÅ¬¥‚ó°`‚ùÅ)
    if (savefile.empty())
        board->initialize(textures); // —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä –Ω–∞ —Ç–≤–æ–µ–π –¥–æ—Å–∫–µ (‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª
    else
        board->importFromFile(savefile,textures);

    bool isFigureSelected = false; // —Ñ–∏–≥—É—Ä–∞ —Å–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è —Ö–æ–¥–∞
    figure* selectedFigure = nullptr; 
    std::vector<std::pair<int, int>> possibleMoves; // –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–∏–≥—É—Ä—ã

    bool endGameScreen=false; // –¥–æ–ª–∂–µ–Ω –ª–∏ –±—ã—Ç—å —ç–∫—Ä–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã?
    sf::RectangleShape newGameButtonRect; // –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã

    std::vector<sf::Sprite> to_choose; // —Å–ø—Ä–∞–π—Ç—ã —Ñ–∏–≥—É—Ä –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
    std::vector<sf::RectangleShape> rectangles_to_choose; // –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ –Ω–∞ –∑–∞–¥–Ω–µ–º –ø–ª–∞–Ω–µ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞

    sf::RectangleShape lastMoveFrom(sf::Vector2f(CELLSIZE, CELLSIZE)); // –∫–≤–∞–¥—Ä–∞—Ç–∏–∫ –æ—Ç–∫—É–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥
    sf::RectangleShape lastMoveTo(sf::Vector2f(CELLSIZE, CELLSIZE)); // –∫–≤–∞–¥—Ä–∞—Ç–∏–∫ –∫—É–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥
    lastMoveFrom.setFillColor(sf::Color(0, 255, 0, 80)); // —Ü–≤–µ—Ç
    lastMoveTo.setFillColor(sf::Color(0, 255, 0, 80)); // —Ü–≤–µ—Ç
    bool hasMoved = false; // —Ñ–ª–∞–≥ –±—ã–ª –ª–∏ —É–∂–µ —Ö–æ–¥ –∞ —Ç–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–≥–¥–∞ —Ö–æ–¥–∞ –Ω–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ —ç—Ç–∏ –∫–≤–∞–¥—Ä–∞—Ç—ã –ø—Ä–æ—Å—Ç–æ –Ω–∞ —É–≥–æ–ª —É–µ–∑–∂–∞–ª–∏ –∏ –∑–∞–∫—Ä—ã–≤–∞–ª–∏ —á–∞—Å—Ç—å –æ–∫–Ω–∞

    // —Å–æ–∑–¥–∞–µ–º –¥–æ—Å–∫—É
    sf::RectangleShape boardRectangles[8][8];
    initializeBoardRectangles(boardRectangles, CELLSIZE, OFFSETX, OFFSETY);

    while (window.isOpen()){//             –º–æ–¥ —á–µ–ª–æ–≤–µ–∫ —Å–∫–æ–ª—å–∫–æ –∏ –∫–æ–º–∞–Ω–¥–∞
        processEvents(window, font, board, 1, 2, endGameScreen, newGameButtonRect, isFigureSelected, selectedFigure, possibleMoves, lastMoveFrom, lastMoveTo, textures, to_choose, rectangles_to_choose, hasMoved, OFFSETX, OFFSETY, CELLSIZE); // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∫–ª–∏–∫ –º—ã—à–∏ –∏ —Ç–¥

        window.clear(sf::Color(128,128,128)); // –æ—Ç—á–∏—â–∞–µ–º –æ–∫–Ω–æ —á—Ç–æ–±—ã –æ–Ω–æ –æ–±–Ω–æ–≤–ª—è–ª–æ—Å—å —Ü–≤–µ—Ç –≤ —Å–∫–æ–±–∫–∞—Ö —ç—Ç–æ —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ (—Å–µ—Ä—ã–π)

        drawBoardAndLabels(window, boardRectangles, letters, numbers); // —Ä–∏—Å—É–µ–º –¥–æ—Å–∫—É –∏ —Ü–∏—Ñ—Ä—ã –±—É–∫–≤—ã
        if (hasMoved) { // –µ—Å–ª–∏ —Ö–æ–¥ –±—ã–ª —Ä–∏—Å—É–µ–º –∑–µ–ª–µ–Ω—ã–µ –∫–≤–∞–¥—Ä–∞—Ç—ã –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ö–æ–¥—É
            window.draw(lastMoveFrom);
            window.draw(lastMoveTo);
        }
        if (board->isKingInCheck(figure::BLACK)){ // –µ—Å–ª–∏ –∫–∞–∫–æ–º—É –Ω–∏–±—É–¥—å –∫–æ—Ä–æ–ª—é —Å—Ç–æ–∏—Ç —à–∞—Ö –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∫—Ä–∞—Å–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç –Ω–∞ –Ω–µ–º
            drawCheck(window,board,figure::BLACK,OFFSETX,OFFSETY,CELLSIZE);
        }else if(board->isKingInCheck(figure::WHITE)){
            drawCheck(window,board,figure::WHITE,OFFSETX,OFFSETY,CELLSIZE);
        }

        drawFigures(window, board, CELLSIZE, OFFSETX, OFFSETY); // —Ä–∏—Å—É–µ–º —Ñ–∏–≥—É—Ä—ã

        if (board->isKingInMate(figure::WHITE)){ // –µ—Å–ª–∏ —É –∫–æ–≥–æ —Ç–æ –º–∞—Ç –∏–ª–∏ –ø–∞—Ç —Ä–∏—Å—É–µ–º —ç–∫—Ä–∞–Ω –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã
            drawEndGameScreen(window,figure::BLACK,font, newGameButtonRect); 
            endGameScreen=true;
        }else if(board->isKingInMate(figure::BLACK)){
            drawEndGameScreen(window,figure::WHITE,font, newGameButtonRect);
            endGameScreen=true;
        }else if (board->isKingInStalemate(figure::WHITE) or board->isKingInStalemate(figure::BLACK)){
            drawEndGameScreen(window,figure::NONE,font, newGameButtonRect);
            endGameScreen=true;
        }

        if (isFigureSelected) { // –µ—Å–ª–∏ —Ñ–∏–≥—É—Ä–∞ –≤—ã–±—Ä–∞–Ω–∞
            drawMoveHighlights(window, possibleMoves, *board, selectedFigure, OFFSETX, OFFSETY, CELLSIZE); // —Ä–∏—Å—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã
        }

        if (board->convertFlag){ // –µ—Å–ª–∏ –ø–µ—à–∫–∞ –Ω–∞ –∫–ª–µ—Ç–∫–µ –¥–ª—è –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è
            createChoiceMenu(board, to_choose, rectangles_to_choose, textures, OFFSETX, OFFSETY, CELLSIZE); // —Å–æ–∑–¥–∞–µ–º –∏ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
            drawChoiceMenu(window, to_choose, rectangles_to_choose);
        }

        window.display(); // –ø–æ–∫–∞–∑—ã–≤–∞–ª–æ—Å—å –æ–∫–Ω–æ —á—Ç–æ–±—ã
    }
    delete board; // –æ—Ç—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –æ—Ç —Ç–≤–æ–µ–π –¥–æ—Å–∫–∏ üò•üò•üò£üò£üò•
}

void vsPlayerFisher(sf::RenderWindow& window,sf::Font& font, std::string savefile){    // –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–≥—Ä—ã –ø—Ä–æ—Ç–∏–≤ –∏–≥—Ä–æ–∫–∞
    const float CELLSIZE = 100.f; // —Ä–∞–∑–º–µ—Ä –∫–ª–µ—Ç–∫–∏
    const float OFFSETX = 50.f; // –æ—Ç—Å—Ç–ø—É–ø –¥–ª—è –±—É–∫–≤ —Å–ª–µ–≤–∞
    const float OFFSETY = 50.f; // –æ—Ç—Å—Ç—É–ø –¥–ª—è —Ü–∏—Ñ—Ä —Å–Ω–∏–∑—É
    
    //–±—É–∫–≤—ã
    sf::Text letters[8];
    createLetters(letters, font, CELLSIZE, OFFSETX, OFFSETY);

    //—Ü–∏—Ñ—Ä—ã
    sf::Text numbers[8];
    createNumbers(numbers, font, CELLSIZE, OFFSETY);

    std::map<std::string, sf::Texture> textures; // –º–∞–ø–∞ —Ç–µ–∫—Å—Ç—É—Ä
    loadTextures(textures);
    Board* board = new Board();  // —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–≤–æ–µ–π –¥–æ—Å–∫–∏ (‚ùÅ¬¥‚ó°`‚ùÅ)
    if (savefile.empty())
        board->fisherPos(textures); // —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä –Ω–∞ —Ç–≤–æ–µ–π –¥–æ—Å–∫–µ (‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª
    else
        board->importFromFile(savefile,textures); // —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä –Ω–∞ —Ç–≤–æ–µ–π –¥–æ—Å–∫–µ (‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª

    bool isFigureSelected = false; // —Ñ–∏–≥—É—Ä–∞ —Å–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è —Ö–æ–¥–∞
    figure* selectedFigure = nullptr; 
    std::vector<std::pair<int, int>> possibleMoves; // –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–∏–≥—É—Ä—ã

    bool endGameScreen=false; // –¥–æ–ª–∂–µ–Ω –ª–∏ –±—ã—Ç—å —ç–∫—Ä–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã?
    sf::RectangleShape newGameButtonRect; // –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã

    std::vector<sf::Sprite> to_choose; // —Å–ø—Ä–∞–π—Ç—ã —Ñ–∏–≥—É—Ä –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
    std::vector<sf::RectangleShape> rectangles_to_choose; // –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ –Ω–∞ –∑–∞–¥–Ω–µ–º –ø–ª–∞–Ω–µ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞

    sf::RectangleShape rightCastle;
    sf::RectangleShape leftCastle;

    sf::RectangleShape lastMoveFrom(sf::Vector2f(CELLSIZE, CELLSIZE)); // –∫–≤–∞–¥—Ä–∞—Ç–∏–∫ –æ—Ç–∫—É–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥
    sf::RectangleShape lastMoveTo(sf::Vector2f(CELLSIZE, CELLSIZE)); // –∫–≤–∞–¥—Ä–∞—Ç–∏–∫ –∫—É–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥
    lastMoveFrom.setFillColor(sf::Color(0, 255, 0, 80)); // —Ü–≤–µ—Ç
    lastMoveTo.setFillColor(sf::Color(0, 255, 0, 80)); // —Ü–≤–µ—Ç
    bool hasMoved = false; // —Ñ–ª–∞–≥ –±—ã–ª –ª–∏ —É–∂–µ —Ö–æ–¥ –∞ —Ç–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–≥–¥–∞ —Ö–æ–¥–∞ –Ω–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ —ç—Ç–∏ –∫–≤–∞–¥—Ä–∞—Ç—ã –ø—Ä–æ—Å—Ç–æ –Ω–∞ —É–≥–æ–ª —É–µ–∑–∂–∞–ª–∏ –∏ –∑–∞–∫—Ä—ã–≤–∞–ª–∏ —á–∞—Å—Ç—å –æ–∫–Ω–∞

    // —Å–æ–∑–¥–∞–µ–º –¥–æ—Å–∫—É
    sf::RectangleShape boardRectangles[8][8];
    initializeBoardRectangles(boardRectangles, CELLSIZE, OFFSETX, OFFSETY);

    while (window.isOpen()){
        bool handled = false;
        processEvents(window, font, board, 2, 2, endGameScreen, newGameButtonRect, isFigureSelected, selectedFigure, possibleMoves, lastMoveFrom, lastMoveTo, textures, to_choose, rectangles_to_choose, hasMoved, OFFSETX, OFFSETY, CELLSIZE, &rightCastle, &leftCastle); // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∫–ª–∏–∫ –º—ã—à–∏ –∏ —Ç–¥

        window.clear(sf::Color(128,128,128)); // –æ—Ç—á–∏—â–∞–µ–º –æ–∫–Ω–æ —á—Ç–æ–±—ã –æ–Ω–æ –æ–±–Ω–æ–≤–ª—è–ª–æ—Å—å —Ü–≤–µ—Ç –≤ —Å–∫–æ–±–∫–∞—Ö —ç—Ç–æ —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ (—Å–µ—Ä—ã–π)

        drawBoardAndLabels(window, boardRectangles, letters, numbers); // —Ä–∏—Å—É–µ–º –¥–æ—Å–∫—É –∏ —Ü–∏—Ñ—Ä—ã –±—É–∫–≤—ã
        if (hasMoved) { // –µ—Å–ª–∏ —Ö–æ–¥ –±—ã–ª —Ä–∏—Å—É–µ–º –∑–µ–ª–µ–Ω—ã–µ –∫–≤–∞–¥—Ä–∞—Ç—ã –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ö–æ–¥—É
            window.draw(lastMoveFrom);
            window.draw(lastMoveTo);
        }
        if (board->isKingInCheck(figure::BLACK)){ // –µ—Å–ª–∏ –∫–∞–∫–æ–º—É –Ω–∏–±—É–¥—å –∫–æ—Ä–æ–ª—é —Å—Ç–æ–∏—Ç —à–∞—Ö –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∫—Ä–∞—Å–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç –Ω–∞ –Ω–µ–º
            drawCheck(window,board,figure::BLACK,OFFSETX,OFFSETY,CELLSIZE);
        }else if(board->isKingInCheck(figure::WHITE)){
            drawCheck(window,board,figure::WHITE,OFFSETX,OFFSETY,CELLSIZE);
        }

        drawFigures(window, board, CELLSIZE, OFFSETX, OFFSETY); // —Ä–∏—Å—É–µ–º —Ñ–∏–≥—É—Ä—ã

        if (board->isKingInMate(figure::WHITE)){ // –µ—Å–ª–∏ —É –∫–æ–≥–æ —Ç–æ –º–∞—Ç –∏–ª–∏ –ø–∞—Ç —Ä–∏—Å—É–µ–º —ç–∫—Ä–∞–Ω –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã
            drawEndGameScreen(window,figure::BLACK,font, newGameButtonRect); 
            endGameScreen=true;
        }else if(board->isKingInMate(figure::BLACK)){
            drawEndGameScreen(window,figure::WHITE,font, newGameButtonRect);
            endGameScreen=true;
        }else if (board->isKingInStalemate(figure::WHITE) or board->isKingInStalemate(figure::BLACK)){
            drawEndGameScreen(window,figure::NONE,font, newGameButtonRect);
            endGameScreen=true;
        }

        if (isFigureSelected) { // –µ—Å–ª–∏ —Ñ–∏–≥—É—Ä–∞ –≤—ã–±—Ä–∞–Ω–∞
            drawMoveHighlights(window, possibleMoves, *board, selectedFigure, OFFSETX, OFFSETY, CELLSIZE); // —Ä–∏—Å—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã
        }

        if (board->convertFlag){ // –µ—Å–ª–∏ –ø–µ—à–∫–∞ –Ω–∞ –∫–ª–µ—Ç–∫–µ –¥–ª—è –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è
            createChoiceMenu(board, to_choose, rectangles_to_choose, textures, OFFSETX, OFFSETY, CELLSIZE); // —Å–æ–∑–¥–∞–µ–º –∏ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
            drawChoiceMenu(window, to_choose, rectangles_to_choose);
        }
        drawCastleButtons(window,rightCastle,leftCastle,font);
        window.display(); // –ø–æ–∫–∞–∑—ã–≤–∞–ª–æ—Å—å –æ–∫–Ω–æ —á—Ç–æ–±—ã
    }
    delete board; // –æ—Ç—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –æ—Ç —Ç–≤–æ–µ–π –¥–æ—Å–∫–∏ üò•üò•üò£üò£üò•
}

void vsComputerStandart(sf::RenderWindow& window,sf::Font& font, figure::teams userTeam, std::string savefile){// –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–≥—Ä—ã –ø—Ä–æ—Ç–∏–≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
    const float CELLSIZE = 100.f; // —Ä–∞–∑–º–µ—Ä –∫–ª–µ—Ç–∫–∏
    const float OFFSETX = 50.f; // –æ—Ç—Å—Ç–ø—É–ø –¥–ª—è –±—É–∫–≤ —Å–ª–µ–≤–∞
    const float OFFSETY = 50.f; // –æ—Ç—Å—Ç—É–ø –¥–ª—è —Ü–∏—Ñ—Ä —Å–Ω–∏–∑—É
    
    //–±—É–∫–≤—ã
    sf::Text letters[8];
    createLetters(letters, font, CELLSIZE, OFFSETX, OFFSETY);

    //—Ü–∏—Ñ—Ä—ã
    sf::Text numbers[8];
    createNumbers(numbers, font, CELLSIZE, OFFSETY);

    std::map<std::string, sf::Texture> textures; // –º–∞–ø–∞ —Ç–µ–∫—Å—Ç—É—Ä
    loadTextures(textures);
    Board* board = new Board();  // —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–≤–æ–µ–π –¥–æ—Å–∫–∏ (‚ùÅ¬¥‚ó°`‚ùÅ)
    if (savefile.empty())
        board->initialize(textures); // —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä –Ω–∞ —Ç–≤–æ–µ–π –¥–æ—Å–∫–µ (‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª
    else
        board->importFromFile(savefile,textures);

    bool isFigureSelected = false; // —Ñ–∏–≥—É—Ä–∞ —Å–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è —Ö–æ–¥–∞
    figure* selectedFigure = nullptr; 
    std::vector<std::pair<int, int>> possibleMoves; // –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–∏–≥—É—Ä—ã

    bool endGameScreen=false; // –¥–æ–ª–∂–µ–Ω –ª–∏ –±—ã—Ç—å —ç–∫—Ä–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã?
    sf::RectangleShape newGameButtonRect; // –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã

    std::vector<sf::Sprite> to_choose; // —Å–ø—Ä–∞–π—Ç—ã —Ñ–∏–≥—É—Ä –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
    std::vector<sf::RectangleShape> rectangles_to_choose; // –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ –Ω–∞ –∑–∞–¥–Ω–µ–º –ø–ª–∞–Ω–µ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞

    sf::RectangleShape lastMoveFrom(sf::Vector2f(CELLSIZE, CELLSIZE)); // –∫–≤–∞–¥—Ä–∞—Ç–∏–∫ –æ—Ç–∫—É–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥
    sf::RectangleShape lastMoveTo(sf::Vector2f(CELLSIZE, CELLSIZE)); // –∫–≤–∞–¥—Ä–∞—Ç–∏–∫ –∫—É–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥
    lastMoveFrom.setFillColor(sf::Color(0, 255, 0, 80)); // —Ü–≤–µ—Ç
    lastMoveTo.setFillColor(sf::Color(0, 255, 0, 80)); // —Ü–≤–µ—Ç
    bool hasMoved = false; // —Ñ–ª–∞–≥ –±—ã–ª –ª–∏ —É–∂–µ —Ö–æ–¥ –∞ —Ç–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–≥–¥–∞ —Ö–æ–¥–∞ –Ω–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ —ç—Ç–∏ –∫–≤–∞–¥—Ä–∞—Ç—ã –ø—Ä–æ—Å—Ç–æ –Ω–∞ —É–≥–æ–ª —É–µ–∑–∂–∞–ª–∏ –∏ –∑–∞–∫—Ä—ã–≤–∞–ª–∏ —á–∞—Å—Ç—å –æ–∫–Ω–∞
  
    // —Å–æ–∑–¥–∞–µ–º –¥–æ—Å–∫—É
    sf::RectangleShape boardRectangles[8][8];
    initializeBoardRectangles(boardRectangles, CELLSIZE, OFFSETX, OFFSETY);
  
    Engine engine;
    const char* enginePath = "..\\stockfish\\stockfish-windows-x86-64-avx2.exe"; //—Ç—Ä–∞–∏–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–≤–∏–∂–æ–∫
    if (!engine.launch(enginePath)) {
        std::cerr << "ERROR: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–≤–∏–∂–æ–∫ –ø–æ –ø—É—Ç–∏ `" << enginePath << "`\n";
        delete board;
        return;
    }
    engine.sendCommand("uci"); //–≤–∫–ª—é—á–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª UCI üòé
    engine.sendCommand("isready"); //–ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
    //engine.sendCommand("position fen 4k3/8/8/8/8/8/PPPPPPPP/4K3 w - - 0 1");
    while (window.isOpen()) { // –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –ø–æ–∫–∞ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ
        if (board->getCurrentTeam() != userTeam) { //–ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–≥–¥–∞ —Ö–æ–¥–∏—Ç –±–æ—Ç
            std::string moves; 
            for (const auto& move : board->movesUCI) { //–ø–µ—Ä–µ–≤–æ–¥–∏–º —Ö–æ–¥—ã –∏–∑ –Ω–∞—à–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –µ2–µ4 —É—Å–ª–æ–≤–Ω—ã–µ
                moves += move + " ";
            }

            engine.sendCommand("position startpos moves " + moves); //–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–≤–∏–∂–∫—É
            engine.sendCommand("go movetime 1000"); //–¥–∞–µ–º –ø–æ–¥—É–º–∞—Ç—å —Å–µ–∫—É–Ω–¥—É, –ø–æ –∏–¥–µ–µ —Ç—É—Ç –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ –¥–∏—Ñ

            std::string bestmove;//–ø–æ–ª—É—á–∞–µ–º –ª—É—á—à–∏–π —Ö–æ–¥
            do {
                auto resp = engine.readLine();
                if (resp.find("bestmove") != std::string::npos) {
                size_t start = resp.find("bestmove") + 9;
                size_t end = resp.find(' ', start);
                bestmove = (end == std::string::npos) ? resp.substr(start) : resp.substr(start, end - start);
                }
            } while (bestmove.empty());

            if (bestmove == "resign") {
                endGameScreen=true; // —á–µ—Ç –Ω–∞–ø–∏—Å–∞–ª –∫–æ–≥–¥–∞ —Å–¥–∞–µ—Ç—Å—è –Ω–æ —Ö–∑ –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –Ω–æ –≤—Ä–æ–¥–µ –¥–æ–ª–∂–Ω–æ
                drawEndGameScreen(window,userTeam, font, newGameButtonRect);
            }

            //–ø–∞—Ä—Å–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            int fx, fy, tx, ty;
            char prom = '\0';
            if (bestmove.length() >= 4) {
                fx = bestmove[0] - 'a';
                fy = bestmove[1] - '1';
                tx = bestmove[2] - 'a';
                ty = bestmove[3] - '1';
                
                if (bestmove.length() >= 5) {// —Å–∏–º–≤–æ–ª –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è
                    prom = bestmove[4];
                    }
                } 
                
                if (board->makeMove({fx, fy}, {tx, ty})){//–≤—ã–ø–æ–ª–Ω—è–µ–º —Ö–æ–¥
                    lastMoveFrom.setPosition(
                    OFFSETX + fx * CELLSIZE,
                    OFFSETY + (7 - fy) * CELLSIZE
                    );
                    lastMoveTo.setPosition(
                        OFFSETX + tx * CELLSIZE,
                        OFFSETY + (7 - ty) * CELLSIZE
                    );
                }

                
                if (prom != '\0') {
                figure::figureTypes newType;
                switch (prom) {
                    case 'r': newType = figure::ROOK; break;
                    case 'b': newType = figure::BISHOP; break;
                    case 'n': newType = figure::KNIGHT; break;
                    case 'q': 
                    default: newType = figure::QUEEN;
                }

                std::string teamChar = (userTeam == figure::WHITE) ? "b" : "w"; //–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –±–æ—Ç–∞
                std::string textureName;
                switch (newType) {
                    case figure::QUEEN: textureName = "q" + teamChar; break;
                    case figure::ROOK: textureName = "r" + teamChar; break;
                    case figure::BISHOP: textureName = "b" + teamChar; break;
                    case figure::KNIGHT: textureName = "n" + teamChar; break;
                    default: textureName = "q" + teamChar;
                }

                board->convertPawn(tx, ty, newType, textures[textureName]); //–ø—Ä–µ–≤—Ä–∞—â–∞–µ–º
                

                board->convertFlag = false;
            }
        }
        processEvents(window, font, board, 1, 1, endGameScreen, newGameButtonRect, isFigureSelected, selectedFigure, possibleMoves, lastMoveFrom, lastMoveTo, textures, to_choose, rectangles_to_choose, hasMoved, OFFSETX, OFFSETY, CELLSIZE); // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∫–ª–∏–∫ –º—ã—à–∏ –∏ —Ç–¥

        

        window.clear(sf::Color(128,128,128)); // –æ—Ç—á–∏—â–∞–µ–º –æ–∫–Ω–æ —á—Ç–æ–±—ã –æ–Ω–æ –æ–±–Ω–æ–≤–ª—è–ª–æ—Å—å —Ü–≤–µ—Ç –≤ —Å–∫–æ–±–∫–∞—Ö —ç—Ç–æ —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ (—Å–µ—Ä—ã–π)

        drawBoardAndLabels(window, boardRectangles, letters, numbers); // —Ä–∏—Å—É–µ–º –¥–æ—Å–∫—É –∏ —Ü–∏—Ñ—Ä—ã –±—É–∫–≤—ã
        if (hasMoved) { // –µ—Å–ª–∏ —Ö–æ–¥ –±—ã–ª —Ä–∏—Å—É–µ–º –∑–µ–ª–µ–Ω—ã–µ –∫–≤–∞–¥—Ä–∞—Ç—ã –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ö–æ–¥—É
            window.draw(lastMoveFrom);
            window.draw(lastMoveTo);
        }
        if (board->isKingInCheck(figure::BLACK)){ // –µ—Å–ª–∏ –∫–∞–∫–æ–º—É –Ω–∏–±—É–¥—å –∫–æ—Ä–æ–ª—é —Å—Ç–æ–∏—Ç —à–∞—Ö –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∫—Ä–∞—Å–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç –Ω–∞ –Ω–µ–º
            drawCheck(window,board,figure::BLACK,OFFSETX,OFFSETY,CELLSIZE);
        }else if(board->isKingInCheck(figure::WHITE)){
            drawCheck(window,board,figure::WHITE,OFFSETX,OFFSETY,CELLSIZE);
        }

        drawFigures(window, board, CELLSIZE, OFFSETX, OFFSETY); // —Ä–∏—Å—É–µ–º —Ñ–∏–≥—É—Ä—ã

        

        if (board->isKingInMate(figure::WHITE)){ // –µ—Å–ª–∏ —É –∫–æ–≥–æ —Ç–æ –º–∞—Ç –∏–ª–∏ –ø–∞—Ç —Ä–∏—Å—É–µ–º —ç–∫—Ä–∞–Ω –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã
            drawEndGameScreen(window,figure::BLACK,font, newGameButtonRect); 
            endGameScreen=true;
        }else if(board->isKingInMate(figure::BLACK)){
            drawEndGameScreen(window,figure::WHITE,font, newGameButtonRect);
            endGameScreen=true;
        }else if (board->isKingInStalemate(figure::WHITE) or board->isKingInStalemate(figure::BLACK)){
            drawEndGameScreen(window,figure::NONE,font, newGameButtonRect);
            endGameScreen=true;
        }

        if (isFigureSelected) { // –µ—Å–ª–∏ —Ñ–∏–≥—É—Ä–∞ –≤—ã–±—Ä–∞–Ω–∞
            drawMoveHighlights(window, possibleMoves, *board, selectedFigure, OFFSETX, OFFSETY, CELLSIZE); // —Ä–∏—Å—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã
        }

        if (board->convertFlag && board->getCurrentTeam() == userTeam){ // –µ—Å–ª–∏ –ø–µ—à–∫–∞ –Ω–∞ –∫–ª–µ—Ç–∫–µ –¥–ª—è –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è
            createChoiceMenu(board, to_choose, rectangles_to_choose, textures, OFFSETX, OFFSETY, CELLSIZE); // —Å–æ–∑–¥–∞–µ–º –∏ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
            drawChoiceMenu(window, to_choose, rectangles_to_choose);
        }

        window.display(); // –ø–æ–∫–∞–∑—ã–≤–∞–ª–æ—Å—å –æ–∫–Ω–æ —á—Ç–æ–±—ã
        
    }
    delete board; // –æ—Ç—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –æ—Ç —Ç–≤–æ–µ–π –¥–æ—Å–∫–∏ üò•üò•üò£üò£üò•
    engine.stop();
}

void vsComputerFisher(sf::RenderWindow& window,sf::Font& font, figure::teams userTeam, std::string savefile){// –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–≥—Ä—ã –ø—Ä–æ—Ç–∏–≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
    const float CELLSIZE = 100.f; // —Ä–∞–∑–º–µ—Ä –∫–ª–µ—Ç–∫–∏
    const float OFFSETX = 50.f; // –æ—Ç—Å—Ç–ø—É–ø –¥–ª—è –±—É–∫–≤ —Å–ª–µ–≤–∞
    const float OFFSETY = 50.f; // –æ—Ç—Å—Ç—É–ø –¥–ª—è —Ü–∏—Ñ—Ä —Å–Ω–∏–∑—É
    
    //–±—É–∫–≤—ã
    sf::Text letters[8];
    createLetters(letters, font, CELLSIZE, OFFSETX, OFFSETY);

    //—Ü–∏—Ñ—Ä—ã
    sf::Text numbers[8];
    createNumbers(numbers, font, CELLSIZE, OFFSETY);

    std::map<std::string, sf::Texture> textures; // –º–∞–ø–∞ —Ç–µ–∫—Å—Ç—É—Ä
    loadTextures(textures);
    Board* board = new Board();  // —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–≤–æ–µ–π –¥–æ—Å–∫–∏ (‚ùÅ¬¥‚ó°`‚ùÅ)
    if (savefile.empty())
        board->fisherPos(textures); // —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä –Ω–∞ —Ç–≤–æ–µ–π –¥–æ—Å–∫–µ (‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª
    else
        board->importFromFile(savefile,textures); // —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä –Ω–∞ —Ç–≤–æ–µ–π –¥–æ—Å–∫–µ (‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª

    bool isFigureSelected = false; // —Ñ–∏–≥—É—Ä–∞ —Å–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è —Ö–æ–¥–∞
    figure* selectedFigure = nullptr; 
    std::vector<std::pair<int, int>> possibleMoves; // –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–∏–≥—É—Ä—ã

    bool endGameScreen=false; // –¥–æ–ª–∂–µ–Ω –ª–∏ –±—ã—Ç—å —ç–∫—Ä–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã?
    sf::RectangleShape newGameButtonRect; // –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã

    std::vector<sf::Sprite> to_choose; // —Å–ø—Ä–∞–π—Ç—ã —Ñ–∏–≥—É—Ä –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
    std::vector<sf::RectangleShape> rectangles_to_choose; // –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ –Ω–∞ –∑–∞–¥–Ω–µ–º –ø–ª–∞–Ω–µ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞

    sf::RectangleShape rightCastle;
    sf::RectangleShape leftCastle;

    sf::RectangleShape lastMoveFrom(sf::Vector2f(CELLSIZE, CELLSIZE)); // –∫–≤–∞–¥—Ä–∞—Ç–∏–∫ –æ—Ç–∫—É–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥
    sf::RectangleShape lastMoveTo(sf::Vector2f(CELLSIZE, CELLSIZE)); // –∫–≤–∞–¥—Ä–∞—Ç–∏–∫ –∫—É–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥
    lastMoveFrom.setFillColor(sf::Color(0, 255, 0, 80)); // —Ü–≤–µ—Ç
    lastMoveTo.setFillColor(sf::Color(0, 255, 0, 80)); // —Ü–≤–µ—Ç
    bool hasMoved = false; // —Ñ–ª–∞–≥ –±—ã–ª –ª–∏ —É–∂–µ —Ö–æ–¥ –∞ —Ç–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–≥–¥–∞ —Ö–æ–¥–∞ –Ω–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ —ç—Ç–∏ –∫–≤–∞–¥—Ä–∞—Ç—ã –ø—Ä–æ—Å—Ç–æ –Ω–∞ —É–≥–æ–ª —É–µ–∑–∂–∞–ª–∏ –∏ –∑–∞–∫—Ä—ã–≤–∞–ª–∏ —á–∞—Å—Ç—å –æ–∫–Ω–∞
  
    // —Å–æ–∑–¥–∞–µ–º –¥–æ—Å–∫—É
    sf::RectangleShape boardRectangles[8][8];
    initializeBoardRectangles(boardRectangles, CELLSIZE, OFFSETX, OFFSETY);
  
    Engine engine;
    const char* enginePath = "..\\stockfish\\stockfish-windows-x86-64-avx2.exe"; //—Ç—Ä–∞–∏–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–≤–∏–∂–æ–∫
    if (!engine.launch(enginePath)) {
        std::cerr << "ERROR: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–≤–∏–∂–æ–∫ –ø–æ –ø—É—Ç–∏ `" << enginePath << "`\n";
        delete board;
        return;
    }
    engine.sendCommand("uci"); //–≤–∫–ª—é—á–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª UCI üòé
    engine.sendCommand("setoption name UCI_Chess960 value true"); //–∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–∏—à–µ—Ä–∞
    engine.sendCommand("isready"); //–ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
    engine.sendCommand(std::string("position fen ") + board->fenPos); //—Å–æ–æ–±—â–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –±–æ—Ç—É


    while (window.isOpen()) { // –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –ø–æ–∫–∞ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ
        
        processEvents(window, font, board, 2, 1, endGameScreen, newGameButtonRect, isFigureSelected, selectedFigure, possibleMoves, lastMoveFrom, lastMoveTo, textures, to_choose, rectangles_to_choose, hasMoved, OFFSETX, OFFSETY, CELLSIZE, &rightCastle, &leftCastle); // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∫–ª–∏–∫ –º—ã—à–∏ –∏ —Ç–¥

        if (board->getCurrentTeam() != userTeam) {
        // 1.2) –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ö–æ–¥–æ–≤
        std::string moves;
        for (const auto& m : board->movesUCI) {
            moves += m + " ";
        }
        // 1.3) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–≤–∏–∂–∫—É –ø–æ–∑–∏—Ü–∏—é –∏ –∂–¥—ë–º –ª—É—á—à–∏–π —Ö–æ–¥
        engine.sendCommand("position fen " + board->fenPos + " moves " + moves);
        engine.sendCommand("go movetime 1000");

        std::string bestmove;
        do {
            auto resp = engine.readLine();
            auto p = resp.find("bestmove");
            if (p != std::string::npos) {
                size_t s = p + 9, e = resp.find(' ', s);
                bestmove = (e == std::string::npos)
                           ? resp.substr(s)
                           : resp.substr(s, e - s);
            }
        } while (bestmove.empty());

        // 1.4) –†–∞–∑–±–∏—Ä–∞–µ–º UCI-—Å—Ç—Ä–æ–∫—É bestmove
        int fx = bestmove[0] - 'a';
        int fy = bestmove[1] - '1';
        int tx = bestmove[2] - 'a';
        int ty = bestmove[3] - '1';
        char prom = bestmove.size() >= 5 ? bestmove[4] : '\0';

        // 1.5) –î–µ–ª–∞–µ–º —Ö–æ–¥ —á–µ—Ä–µ–∑ –≤–∞—à –º–µ—Ç–æ–¥
        board->makeMove({fx, fy}, {tx, ty});
         lastMoveFrom.setPosition(OFFSETX + fx * CELLSIZE,
                                 OFFSETY + (7 - fy) * CELLSIZE);
        lastMoveTo  .setPosition(OFFSETX + tx * CELLSIZE,
                                 OFFSETY + (7 - ty) * CELLSIZE);
        hasMoved = true;

        // 1.6) –ï—Å–ª–∏ –±—ã–ª–∞ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ ‚Äî –≤—ã–∑—ã–≤–∞–µ–º convertPawn
        if (prom) {
            figure::figureTypes newType;
            switch (prom) {
                case 'r': newType = figure::ROOK;   break;
                case 'b': newType = figure::BISHOP; break;
                case 'n': newType = figure::KNIGHT; break;
                case 'q': default:  newType = figure::QUEEN;
            }
            // —Ç–µ–∫—Å—Ç—É—Ä–∞ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –ø–æ —Ü–≤–µ—Ç—É –±–æ—Ça
            std::string tname = (userTeam == figure::WHITE ? "b" : "w");
            switch (newType) {
                case figure::QUEEN:  tname = "q" + tname; break;
                case figure::ROOK:   tname = "r" + tname; break;
                case figure::BISHOP: tname = "b" + tname; break;
                case figure::KNIGHT: tname = "n" + tname; break;
                default: break;
            }
            board->convertPawn(tx, ty, newType, textures[tname]);
        }      
            board->convertFlag = false;       
        }

        window.clear(sf::Color(128,128,128)); // –æ—Ç—á–∏—â–∞–µ–º –æ–∫–Ω–æ —á—Ç–æ–±—ã –æ–Ω–æ –æ–±–Ω–æ–≤–ª—è–ª–æ—Å—å —Ü–≤–µ—Ç –≤ —Å–∫–æ–±–∫–∞—Ö —ç—Ç–æ —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ (—Å–µ—Ä—ã–π)

        drawBoardAndLabels(window, boardRectangles, letters, numbers); // —Ä–∏—Å—É–µ–º –¥–æ—Å–∫—É –∏ —Ü–∏—Ñ—Ä—ã –±—É–∫–≤—ã
        if (hasMoved) { // –µ—Å–ª–∏ —Ö–æ–¥ –±—ã–ª —Ä–∏—Å—É–µ–º –∑–µ–ª–µ–Ω—ã–µ –∫–≤–∞–¥—Ä–∞—Ç—ã –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ö–æ–¥—É
            window.draw(lastMoveFrom);
            window.draw(lastMoveTo);
        }
        if (board->isKingInCheck(figure::BLACK)){ // –µ—Å–ª–∏ –∫–∞–∫–æ–º—É –Ω–∏–±—É–¥—å –∫–æ—Ä–æ–ª—é —Å—Ç–æ–∏—Ç —à–∞—Ö –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∫—Ä–∞—Å–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç –Ω–∞ –Ω–µ–º
            drawCheck(window,board,figure::BLACK,OFFSETX,OFFSETY,CELLSIZE);
        }else if(board->isKingInCheck(figure::WHITE)){
            drawCheck(window,board,figure::WHITE,OFFSETX,OFFSETY,CELLSIZE);
        }

        drawFigures(window, board, CELLSIZE, OFFSETX, OFFSETY); // —Ä–∏—Å—É–µ–º —Ñ–∏–≥—É—Ä—ã

        

        if (board->isKingInMate(figure::WHITE)){ // –µ—Å–ª–∏ —É –∫–æ–≥–æ —Ç–æ –º–∞—Ç –∏–ª–∏ –ø–∞—Ç —Ä–∏—Å—É–µ–º —ç–∫—Ä–∞–Ω –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã
            drawEndGameScreen(window,figure::BLACK,font, newGameButtonRect); 
            endGameScreen=true;
        }else if(board->isKingInMate(figure::BLACK)){
            drawEndGameScreen(window,figure::WHITE,font, newGameButtonRect);
            endGameScreen=true;
        }else if (board->isKingInStalemate(figure::WHITE) or board->isKingInStalemate(figure::BLACK)){
            drawEndGameScreen(window,figure::NONE,font, newGameButtonRect);
            endGameScreen=true;
        }

        if (isFigureSelected) { // –µ—Å–ª–∏ —Ñ–∏–≥—É—Ä–∞ –≤—ã–±—Ä–∞–Ω–∞
            drawMoveHighlights(window, possibleMoves, *board, selectedFigure, OFFSETX, OFFSETY, CELLSIZE); // —Ä–∏—Å—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã
        }

        if (board->convertFlag && board->getCurrentTeam() == userTeam){ // –µ—Å–ª–∏ –ø–µ—à–∫–∞ –Ω–∞ –∫–ª–µ—Ç–∫–µ –¥–ª—è –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è
            createChoiceMenu(board, to_choose, rectangles_to_choose, textures, OFFSETX, OFFSETY, CELLSIZE); // —Å–æ–∑–¥–∞–µ–º –∏ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
            drawChoiceMenu(window, to_choose, rectangles_to_choose);
        }
        drawCastleButtons(window,rightCastle,leftCastle,font);
        window.display(); // –ø–æ–∫–∞–∑—ã–≤–∞–ª–æ—Å—å –æ–∫–Ω–æ —á—Ç–æ–±—ã
        
    }
    delete board; // –æ—Ç—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –æ—Ç —Ç–≤–æ–µ–π –¥–æ—Å–∫–∏ üò•üò•üò£üò£üò•
    engine.stop();
}

void vsPlayer3Check(sf::RenderWindow& window,sf::Font& font, std::string savefile){    // –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–≥—Ä—ã –ø—Ä–æ—Ç–∏–≤ –∏–≥—Ä–æ–∫–∞
    const float CELLSIZE = 100.f; // —Ä–∞–∑–º–µ—Ä –∫–ª–µ—Ç–∫–∏
    const float OFFSETX = 50.f; // –æ—Ç—Å—Ç–ø—É–ø –¥–ª—è –±—É–∫–≤ —Å–ª–µ–≤–∞
    const float OFFSETY = 50.f; // –æ—Ç—Å—Ç—É–ø –¥–ª—è —Ü–∏—Ñ—Ä —Å–Ω–∏–∑—É
    
    //–±—É–∫–≤—ã
    sf::Text letters[8];
    createLetters(letters, font, CELLSIZE, OFFSETX, OFFSETY);

    //—Ü–∏—Ñ—Ä—ã
    sf::Text numbers[8];
    createNumbers(numbers, font, CELLSIZE, OFFSETY);

    std::map<std::string, sf::Texture> textures; // –º–∞–ø–∞ —Ç–µ–∫—Å—Ç—É—Ä
    loadTextures(textures);
    
    int whiteChecks = 0;
    int blackChecks = 0;
    bool whiteWasInCheck = false;
    bool blackWasInCheck = false;

    Board* board = new Board();  // —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–≤–æ–µ–π –¥–æ—Å–∫–∏ (‚ùÅ¬¥‚ó°`‚ùÅ)
    if (savefile.empty())
        board->initialize(textures); // —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä –Ω–∞ —Ç–≤–æ–µ–π –¥–æ—Å–∫–µ (‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª
    else
        board->importFromFile(savefile,textures);

    bool isFigureSelected = false; // —Ñ–∏–≥—É—Ä–∞ —Å–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è —Ö–æ–¥–∞
    figure* selectedFigure = nullptr; 
    std::vector<std::pair<int, int>> possibleMoves; // –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–∏–≥—É—Ä—ã

    bool endGameScreen=false; // –¥–æ–ª–∂–µ–Ω –ª–∏ –±—ã—Ç—å —ç–∫—Ä–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã?
    sf::RectangleShape newGameButtonRect; // –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã

    std::vector<sf::Sprite> to_choose; // —Å–ø—Ä–∞–π—Ç—ã —Ñ–∏–≥—É—Ä –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
    std::vector<sf::RectangleShape> rectangles_to_choose; // –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ –Ω–∞ –∑–∞–¥–Ω–µ–º –ø–ª–∞–Ω–µ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞

    sf::RectangleShape lastMoveFrom(sf::Vector2f(CELLSIZE, CELLSIZE)); // –∫–≤–∞–¥—Ä–∞—Ç–∏–∫ –æ—Ç–∫—É–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥
    sf::RectangleShape lastMoveTo(sf::Vector2f(CELLSIZE, CELLSIZE)); // –∫–≤–∞–¥—Ä–∞—Ç–∏–∫ –∫—É–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥
    lastMoveFrom.setFillColor(sf::Color(0, 255, 0, 80)); // —Ü–≤–µ—Ç
    lastMoveTo.setFillColor(sf::Color(0, 255, 0, 80)); // —Ü–≤–µ—Ç
    bool hasMoved = false; // —Ñ–ª–∞–≥ –±—ã–ª –ª–∏ —É–∂–µ —Ö–æ–¥ –∞ —Ç–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–≥–¥–∞ —Ö–æ–¥–∞ –Ω–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ —ç—Ç–∏ –∫–≤–∞–¥—Ä–∞—Ç—ã –ø—Ä–æ—Å—Ç–æ –Ω–∞ —É–≥–æ–ª —É–µ–∑–∂–∞–ª–∏ –∏ –∑–∞–∫—Ä—ã–≤–∞–ª–∏ —á–∞—Å—Ç—å –æ–∫–Ω–∞

    // —Å–æ–∑–¥–∞–µ–º –¥–æ—Å–∫—É
    sf::RectangleShape boardRectangles[8][8];
    initializeBoardRectangles(boardRectangles, CELLSIZE, OFFSETX, OFFSETY);

    while (window.isOpen()){
        processEvents(window, font, board, 3, 2, endGameScreen, newGameButtonRect, isFigureSelected, selectedFigure, possibleMoves, lastMoveFrom, lastMoveTo, textures, to_choose, rectangles_to_choose, hasMoved, OFFSETX, OFFSETY, CELLSIZE); // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∫–ª–∏–∫ –º—ã—à–∏ –∏ —Ç–¥

        window.clear(sf::Color(128,128,128)); // –æ—Ç—á–∏—â–∞–µ–º –æ–∫–Ω–æ —á—Ç–æ–±—ã –æ–Ω–æ –æ–±–Ω–æ–≤–ª—è–ª–æ—Å—å —Ü–≤–µ—Ç –≤ —Å–∫–æ–±–∫–∞—Ö —ç—Ç–æ —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ (—Å–µ—Ä—ã–π)

        drawBoardAndLabels(window, boardRectangles, letters, numbers); // —Ä–∏—Å—É–µ–º –¥–æ—Å–∫—É –∏ —Ü–∏—Ñ—Ä—ã –±—É–∫–≤—ã
        if (hasMoved) { // –µ—Å–ª–∏ —Ö–æ–¥ –±—ã–ª —Ä–∏—Å—É–µ–º –∑–µ–ª–µ–Ω—ã–µ –∫–≤–∞–¥—Ä–∞—Ç—ã –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ö–æ–¥—É
            window.draw(lastMoveFrom);
            window.draw(lastMoveTo);
        }
        if (board->isKingInCheck(figure::BLACK)){ // –µ—Å–ª–∏ –∫–∞–∫–æ–º—É –Ω–∏–±—É–¥—å –∫–æ—Ä–æ–ª—é —Å—Ç–æ–∏—Ç —à–∞—Ö –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∫—Ä–∞—Å–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç –Ω–∞ –Ω–µ–º
            if (!blackWasInCheck)
                blackChecks++;
            blackWasInCheck = true;
            drawCheck(window,board,figure::BLACK,OFFSETX,OFFSETY,CELLSIZE);
        }else if(board->isKingInCheck(figure::WHITE)){
            if (!whiteWasInCheck)
                whiteChecks++;
            whiteWasInCheck = true;
            drawCheck(window,board,figure::WHITE,OFFSETX,OFFSETY,CELLSIZE);
        }
        else{
            whiteWasInCheck=false;
            blackWasInCheck=false;
        }

        drawFigures(window, board, CELLSIZE, OFFSETX, OFFSETY); // —Ä–∏—Å—É–µ–º —Ñ–∏–≥—É—Ä—ã

        if (board->isKingInMate(figure::WHITE) or blackChecks>=3){ // –µ—Å–ª–∏ —É –∫–æ–≥–æ —Ç–æ –º–∞—Ç –∏–ª–∏ –ø–∞—Ç —Ä–∏—Å—É–µ–º —ç–∫—Ä–∞–Ω –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã
            drawEndGameScreen(window,figure::BLACK,font, newGameButtonRect); 
            endGameScreen=true;
        }else if(board->isKingInMate(figure::BLACK) or whiteChecks>=3){
            drawEndGameScreen(window,figure::WHITE,font, newGameButtonRect);
            endGameScreen=true;
        }else if (board->isKingInStalemate(figure::WHITE) or board->isKingInStalemate(figure::BLACK)){
            drawEndGameScreen(window,figure::NONE,font, newGameButtonRect);
            endGameScreen=true;
        }

        if (isFigureSelected) { // –µ—Å–ª–∏ —Ñ–∏–≥—É—Ä–∞ –≤—ã–±—Ä–∞–Ω–∞
            drawMoveHighlights(window, possibleMoves, *board, selectedFigure, OFFSETX, OFFSETY, CELLSIZE); // —Ä–∏—Å—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã
        }

        if (board->convertFlag){ // –µ—Å–ª–∏ –ø–µ—à–∫–∞ –Ω–∞ –∫–ª–µ—Ç–∫–µ –¥–ª—è –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è
            createChoiceMenu(board, to_choose, rectangles_to_choose, textures, OFFSETX, OFFSETY, CELLSIZE); // —Å–æ–∑–¥–∞–µ–º –∏ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
            drawChoiceMenu(window, to_choose, rectangles_to_choose);
        }

        window.display(); // –ø–æ–∫–∞–∑—ã–≤–∞–ª–æ—Å—å –æ–∫–Ω–æ —á—Ç–æ–±—ã
    }
    delete board; // –æ—Ç—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –æ—Ç —Ç–≤–æ–µ–π –¥–æ—Å–∫–∏ üò•üò•üò£üò£üò•
}

void vsComputer3Check(sf::RenderWindow& window,sf::Font& font, figure::teams userTeam, std::string savefile){// –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–≥—Ä—ã –ø—Ä–æ—Ç–∏–≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
    const float CELLSIZE = 100.f; // —Ä–∞–∑–º–µ—Ä –∫–ª–µ—Ç–∫–∏
    const float OFFSETX = 50.f; // –æ—Ç—Å—Ç–ø—É–ø –¥–ª—è –±—É–∫–≤ —Å–ª–µ–≤–∞
    const float OFFSETY = 50.f; // –æ—Ç—Å—Ç—É–ø –¥–ª—è —Ü–∏—Ñ—Ä —Å–Ω–∏–∑—É
    
    int whiteChecks = 0;
    int blackChecks = 0;
    bool whiteWasInCheck = false;
    bool blackWasInCheck = false;

    //–±—É–∫–≤—ã
    sf::Text letters[8];
    createLetters(letters, font, CELLSIZE, OFFSETX, OFFSETY);

    //—Ü–∏—Ñ—Ä—ã
    sf::Text numbers[8];
    createNumbers(numbers, font, CELLSIZE, OFFSETY);

    std::map<std::string, sf::Texture> textures; // –º–∞–ø–∞ —Ç–µ–∫—Å—Ç—É—Ä
    loadTextures(textures);
    Board* board = new Board();  // —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–≤–æ–µ–π –¥–æ—Å–∫–∏ (‚ùÅ¬¥‚ó°`‚ùÅ)
    if (savefile.empty())
        board->initialize(textures); // —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä –Ω–∞ —Ç–≤–æ–µ–π –¥–æ—Å–∫–µ (‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª
    else
        board->importFromFile(savefile,textures);

    bool isFigureSelected = false; // —Ñ–∏–≥—É—Ä–∞ —Å–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è —Ö–æ–¥–∞
    figure* selectedFigure = nullptr; 
    std::vector<std::pair<int, int>> possibleMoves; // –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–∏–≥—É—Ä—ã

    bool endGameScreen=false; // –¥–æ–ª–∂–µ–Ω –ª–∏ –±—ã—Ç—å —ç–∫—Ä–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã?
    sf::RectangleShape newGameButtonRect; // –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã

    std::vector<sf::Sprite> to_choose; // —Å–ø—Ä–∞–π—Ç—ã —Ñ–∏–≥—É—Ä –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
    std::vector<sf::RectangleShape> rectangles_to_choose; // –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ –Ω–∞ –∑–∞–¥–Ω–µ–º –ø–ª–∞–Ω–µ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞

    sf::RectangleShape lastMoveFrom(sf::Vector2f(CELLSIZE, CELLSIZE)); // –∫–≤–∞–¥—Ä–∞—Ç–∏–∫ –æ—Ç–∫—É–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥
    sf::RectangleShape lastMoveTo(sf::Vector2f(CELLSIZE, CELLSIZE)); // –∫–≤–∞–¥—Ä–∞—Ç–∏–∫ –∫—É–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥
    lastMoveFrom.setFillColor(sf::Color(0, 255, 0, 80)); // —Ü–≤–µ—Ç
    lastMoveTo.setFillColor(sf::Color(0, 255, 0, 80)); // —Ü–≤–µ—Ç
    bool hasMoved = false; // —Ñ–ª–∞–≥ –±—ã–ª –ª–∏ —É–∂–µ —Ö–æ–¥ –∞ —Ç–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–≥–¥–∞ —Ö–æ–¥–∞ –Ω–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ —ç—Ç–∏ –∫–≤–∞–¥—Ä–∞—Ç—ã –ø—Ä–æ—Å—Ç–æ –Ω–∞ —É–≥–æ–ª —É–µ–∑–∂–∞–ª–∏ –∏ –∑–∞–∫—Ä—ã–≤–∞–ª–∏ —á–∞—Å—Ç—å –æ–∫–Ω–∞
  
    // —Å–æ–∑–¥–∞–µ–º –¥–æ—Å–∫—É
    sf::RectangleShape boardRectangles[8][8];
    initializeBoardRectangles(boardRectangles, CELLSIZE, OFFSETX, OFFSETY);
  
    Engine engine;
    const char* enginePath = "..\\stockfish\\stockfish-windows-x86-64-avx2.exe"; //—Ç—Ä–∞–∏–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–≤–∏–∂–æ–∫
    if (!engine.launch(enginePath)) {
        std::cerr << "ERROR: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–≤–∏–∂–æ–∫ –ø–æ –ø—É—Ç–∏ `" << enginePath << "`\n";
        delete board;
        return;
    }
    engine.sendCommand("uci"); //–≤–∫–ª—é—á–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª UCI üòé
    engine.sendCommand("isready"); //–ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
    //engine.sendCommand("position fen 4k3/8/8/8/8/8/PPPPPPPP/4K3 w - - 0 1");
    while (window.isOpen()) { // –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –ø–æ–∫–∞ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ
        if (board->getCurrentTeam() != userTeam) { //–ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–≥–¥–∞ —Ö–æ–¥–∏—Ç –±–æ—Ç
            std::string moves; 
            for (const auto& move : board->movesUCI) { //–ø–µ—Ä–µ–≤–æ–¥–∏–º —Ö–æ–¥—ã –∏–∑ –Ω–∞—à–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –µ2–µ4 —É—Å–ª–æ–≤–Ω—ã–µ
                moves += move + " ";
            }

            engine.sendCommand("position startpos moves " + moves); //–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–≤–∏–∂–∫—É
            engine.sendCommand("go movetime 1000"); //–¥–∞–µ–º –ø–æ–¥—É–º–∞—Ç—å —Å–µ–∫—É–Ω–¥—É, –ø–æ –∏–¥–µ–µ —Ç—É—Ç –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ –¥–∏—Ñ

            std::string bestmove;//–ø–æ–ª—É—á–∞–µ–º –ª—É—á—à–∏–π —Ö–æ–¥
            do {
                auto resp = engine.readLine();
                if (resp.find("bestmove") != std::string::npos) {
                size_t start = resp.find("bestmove") + 9;
                size_t end = resp.find(' ', start);
                bestmove = (end == std::string::npos) ? resp.substr(start) : resp.substr(start, end - start);
                }
            } while (bestmove.empty());

            if (bestmove == "resign") {
                endGameScreen=true; // —á–µ—Ç –Ω–∞–ø–∏—Å–∞–ª –∫–æ–≥–¥–∞ —Å–¥–∞–µ—Ç—Å—è –Ω–æ —Ö–∑ –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –Ω–æ –≤—Ä–æ–¥–µ –¥–æ–ª–∂–Ω–æ
                drawEndGameScreen(window,userTeam, font, newGameButtonRect);
            }

            //–ø–∞—Ä—Å–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            int fx, fy, tx, ty;
            char prom = '\0';
            if (bestmove.length() >= 4) {
                fx = bestmove[0] - 'a';
                fy = bestmove[1] - '1';
                tx = bestmove[2] - 'a';
                ty = bestmove[3] - '1';
                
                if (bestmove.length() >= 5) {// —Å–∏–º–≤–æ–ª –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è
                    prom = bestmove[4];
                    }
                } 
                
                if (board->makeMove({fx, fy}, {tx, ty})){//–≤—ã–ø–æ–ª–Ω—è–µ–º —Ö–æ–¥
                    lastMoveFrom.setPosition(
                    OFFSETX + fx * CELLSIZE,
                    OFFSETY + (7 - fy) * CELLSIZE
                    );
                    lastMoveTo.setPosition(
                        OFFSETX + tx * CELLSIZE,
                        OFFSETY + (7 - ty) * CELLSIZE
                    );
                }

                
                if (prom != '\0') {
                figure::figureTypes newType;
                switch (prom) {
                    case 'r': newType = figure::ROOK; break;
                    case 'b': newType = figure::BISHOP; break;
                    case 'n': newType = figure::KNIGHT; break;
                    case 'q': 
                    default: newType = figure::QUEEN;
                }

                std::string teamChar = (userTeam == figure::WHITE) ? "b" : "w"; //–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –±–æ—Ç–∞
                std::string textureName;
                switch (newType) {
                    case figure::QUEEN: textureName = "q" + teamChar; break;
                    case figure::ROOK: textureName = "r" + teamChar; break;
                    case figure::BISHOP: textureName = "b" + teamChar; break;
                    case figure::KNIGHT: textureName = "n" + teamChar; break;
                    default: textureName = "q" + teamChar;
                }

                board->convertPawn(tx, ty, newType, textures[textureName]); //–ø—Ä–µ–≤—Ä–∞—â–∞–µ–º
                

                board->convertFlag = false;
            }
        }
        processEvents(window, font, board, 3, 1, endGameScreen, newGameButtonRect, isFigureSelected, selectedFigure, possibleMoves, lastMoveFrom, lastMoveTo, textures, to_choose, rectangles_to_choose, hasMoved, OFFSETX, OFFSETY, CELLSIZE); // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∫–ª–∏–∫ –º—ã—à–∏ –∏ —Ç–¥

        

        window.clear(sf::Color(128,128,128)); // –æ—Ç—á–∏—â–∞–µ–º –æ–∫–Ω–æ —á—Ç–æ–±—ã –æ–Ω–æ –æ–±–Ω–æ–≤–ª—è–ª–æ—Å—å —Ü–≤–µ—Ç –≤ —Å–∫–æ–±–∫–∞—Ö —ç—Ç–æ —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ (—Å–µ—Ä—ã–π)

        drawBoardAndLabels(window, boardRectangles, letters, numbers); // —Ä–∏—Å—É–µ–º –¥–æ—Å–∫—É –∏ —Ü–∏—Ñ—Ä—ã –±—É–∫–≤—ã
        if (hasMoved) { // –µ—Å–ª–∏ —Ö–æ–¥ –±—ã–ª —Ä–∏—Å—É–µ–º –∑–µ–ª–µ–Ω—ã–µ –∫–≤–∞–¥—Ä–∞—Ç—ã –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ö–æ–¥—É
            window.draw(lastMoveFrom);
            window.draw(lastMoveTo);
        }
        if (board->isKingInCheck(figure::BLACK)){ // –µ—Å–ª–∏ –∫–∞–∫–æ–º—É –Ω–∏–±—É–¥—å –∫–æ—Ä–æ–ª—é —Å—Ç–æ–∏—Ç —à–∞—Ö –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∫—Ä–∞—Å–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç –Ω–∞ –Ω–µ–º
            if (!blackWasInCheck)
                blackChecks++;
            blackWasInCheck = true;
            drawCheck(window,board,figure::BLACK,OFFSETX,OFFSETY,CELLSIZE);
        }else if(board->isKingInCheck(figure::WHITE)){
            if (!whiteWasInCheck)
                whiteChecks++;
            whiteWasInCheck = true;
            drawCheck(window,board,figure::WHITE,OFFSETX,OFFSETY,CELLSIZE);
        }else{
            whiteWasInCheck=false;
            blackWasInCheck=false;
        }

        drawFigures(window, board, CELLSIZE, OFFSETX, OFFSETY); // —Ä–∏—Å—É–µ–º —Ñ–∏–≥—É—Ä—ã

        

        if (board->isKingInMate(figure::WHITE) or blackChecks>=3){ // –µ—Å–ª–∏ —É –∫–æ–≥–æ —Ç–æ –º–∞—Ç –∏–ª–∏ –ø–∞—Ç —Ä–∏—Å—É–µ–º —ç–∫—Ä–∞–Ω –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã
            drawEndGameScreen(window,figure::BLACK,font, newGameButtonRect); 
            endGameScreen=true;
        }else if(board->isKingInMate(figure::BLACK) or whiteChecks>=3){
            drawEndGameScreen(window,figure::WHITE,font, newGameButtonRect);
            endGameScreen=true;
        }else if (board->isKingInStalemate(figure::WHITE) or board->isKingInStalemate(figure::BLACK)){
            drawEndGameScreen(window,figure::NONE,font, newGameButtonRect);
            endGameScreen=true;
        }

        if (isFigureSelected) { // –µ—Å–ª–∏ —Ñ–∏–≥—É—Ä–∞ –≤—ã–±—Ä–∞–Ω–∞
            drawMoveHighlights(window, possibleMoves, *board, selectedFigure, OFFSETX, OFFSETY, CELLSIZE); // —Ä–∏—Å—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã
        }

        if (board->convertFlag && board->getCurrentTeam() == userTeam){ // –µ—Å–ª–∏ –ø–µ—à–∫–∞ –Ω–∞ –∫–ª–µ—Ç–∫–µ –¥–ª—è –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è
            createChoiceMenu(board, to_choose, rectangles_to_choose, textures, OFFSETX, OFFSETY, CELLSIZE); // —Å–æ–∑–¥–∞–µ–º –∏ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
            drawChoiceMenu(window, to_choose, rectangles_to_choose);
        }

        window.display(); // –ø–æ–∫–∞–∑—ã–≤–∞–ª–æ—Å—å –æ–∫–Ω–æ —á—Ç–æ–±—ã
        
    }
    delete board; // –æ—Ç—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –æ—Ç —Ç–≤–æ–µ–π –¥–æ—Å–∫–∏ üò•üò•üò£üò£üò•
    engine.stop();
}
// TODO —Ä–∞–∑–±–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–¥ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –∞ —Ç–æ —á–µ—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–æ–≤


void createPuzzle(sf::RenderWindow& window,sf::Font& font){
    const float CELLSIZE = 100.f; // —Ä–∞–∑–º–µ—Ä –∫–ª–µ—Ç–∫–∏
    const float OFFSETX = 50.f; // –æ—Ç—Å—Ç–ø—É–ø –¥–ª—è –±—É–∫–≤ —Å–ª–µ–≤–∞
    const float OFFSETY = 50.f; // –æ—Ç—Å—Ç—É–ø –¥–ª—è —Ü–∏—Ñ—Ä —Å–Ω–∏–∑—É
    
    enum createPuzzleModes {Setup,Game};

    createPuzzleModes currentMode = Setup;

    //–±—É–∫–≤—ã
    sf::Text letters[8];
    createLetters(letters, font, CELLSIZE, OFFSETX, OFFSETY);

    //—Ü–∏—Ñ—Ä—ã
    sf::Text numbers[8];
    createNumbers(numbers, font, CELLSIZE, OFFSETY);

    std::map<std::string, sf::Texture> textures; // –º–∞–ø–∞ —Ç–µ–∫—Å—Ç—É—Ä
    loadTextures(textures);
    Board* board = new Board();  // —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–≤–æ–µ–π –¥–æ—Å–∫–∏ (‚ùÅ¬¥‚ó°`‚ùÅ)
    board->clear();

    std::pair<int,int> selectedCell = std::make_pair(-1,-1);
    bool cellIsSelected = false; 
    int choosedFigurePos;

    std::vector<sf::Sprite> figureSpritesToChoose; // —Å–ø—Ä–∞–π—Ç—ã —Ñ–∏–≥—É—Ä –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
    std::vector<sf::RectangleShape> rectanglesToChoose; // –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ –Ω–∞ –∑–∞–¥–Ω–µ–º –ø–ª–∞–Ω–µ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
    sf::RectangleShape container; 

    sf::RectangleShape nextModeBtnShape;

    sf::RectangleShape choosedCellRect(sf::Vector2f(CELLSIZE, CELLSIZE)); // –∫–≤–∞–¥—Ä–∞—Ç–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–∞—é—â–∏–π –∫–ª–µ—Ç–∫—É –≤—ã–±—Ä–∞–Ω—É—é
    choosedCellRect.setFillColor(sf::Color(0, 255, 0, 80)); // —Ü–≤–µ—Ç
  
    bool isFigureSelected = false; // —Ñ–∏–≥—É—Ä–∞ —Å–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è —Ö–æ–¥–∞
    figure* selectedFigure = nullptr; 
    std::vector<std::pair<int, int>> possibleMoves; // –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–∏–≥—É—Ä—ã

    std::vector<sf::Sprite> to_choose; // —Å–ø—Ä–∞–π—Ç—ã —Ñ–∏–≥—É—Ä –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
    std::vector<sf::RectangleShape> rectangles_to_choose; // –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ –Ω–∞ –∑–∞–¥–Ω–µ–º –ø–ª–∞–Ω–µ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞

    sf::RectangleShape lastMoveFrom(sf::Vector2f(CELLSIZE, CELLSIZE)); // –∫–≤–∞–¥—Ä–∞—Ç–∏–∫ –æ—Ç–∫—É–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥
    sf::RectangleShape lastMoveTo(sf::Vector2f(CELLSIZE, CELLSIZE)); // –∫–≤–∞–¥—Ä–∞—Ç–∏–∫ –∫—É–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥
    lastMoveFrom.setFillColor(sf::Color(0, 255, 0, 80)); // —Ü–≤–µ—Ç
    lastMoveTo.setFillColor(sf::Color(0, 255, 0, 80)); // —Ü–≤–µ—Ç
    bool hasMoved = false; // —Ñ–ª–∞–≥ –±—ã–ª –ª–∏ —É–∂–µ —Ö–æ–¥ –∞ —Ç–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–≥–¥–∞ —Ö–æ–¥–∞ –Ω–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ —ç—Ç–∏ –∫–≤–∞–¥—Ä–∞—Ç—ã –ø—Ä–æ—Å—Ç–æ –Ω–∞ —É–≥–æ–ª —É–µ–∑–∂–∞–ª–∏ –∏ –∑–∞–∫—Ä—ã–≤–∞–ª–∏ —á–∞—Å—Ç—å –æ–∫–Ω–∞

    // —Å–æ–∑–¥–∞–µ–º –¥–æ—Å–∫—É
    sf::RectangleShape boardRectangles[8][8];
    initializeBoardRectangles(boardRectangles, CELLSIZE, OFFSETX, OFFSETY);
    while (window.isOpen()){
        window.clear(sf::Color(128,128,128));
        sf::Event event;
        if (currentMode == Setup){
            while (window.pollEvent(event)) {
                handleWindowClose(window,event);
                if (event.type == sf::Event::MouseButtonPressed && // –Ω–∞–∂–∞—Ç–∏–µ –ª–µ–≤–æ–π –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏
                event.mouseButton.button == sf::Mouse::Left){
                    sf::Vector2f mousePos(event.mouseButton.x, event.mouseButton.y); // –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
                    if (nextModeBtnShape.getGlobalBounds().contains(mousePos)){
                        currentMode = Game;
                        continue;
                    }
                    if (cellIsSelected){
                        choosedFigurePos = handleCreatePuzzleEvents(mousePos,container,CELLSIZE);
                        if (choosedFigurePos != -1) {
                            // –ü–æ–∑–∏—Ü–∏–∏: 0‚Äì5 ‚Äî –±–µ–ª—ã–µ —Ñ–∏–≥—É—Ä—ã, 6‚Äì11 ‚Äî —á–µ—Ä–Ω—ã–µ
                            std::vector<std::string> types = {"k", "q", "b", "n", "r", "p"};
                            int typeIndex = choosedFigurePos % 6;
                            bool isWhite = choosedFigurePos < 6;
                            std::string figure = types[typeIndex] + (isWhite ? "w" : "b");

                            char typeChar = figure[0];  // 'k', 'q', 'b', 'n', 'r', 'p'
                            char colorChar = figure[1]; // 'w' –∏–ª–∏ 'b'

                            figure::teams team = (colorChar == 'w') ? figure::teams::WHITE : figure::teams::BLACK;

                            if (typeChar == 'k')
                                board->setFigure(selectedCell.first, selectedCell.second, std::make_unique<king>(team, selectedCell, textures[figure]));
                            else if (typeChar == 'q')
                                board->setFigure(selectedCell.first, selectedCell.second, std::make_unique<queen>(team, selectedCell, textures[figure]));
                            else if (typeChar == 'b')
                                board->setFigure(selectedCell.first, selectedCell.second, std::make_unique<bishop>(team, selectedCell, textures[figure]));
                            else if (typeChar == 'n')
                                board->setFigure(selectedCell.first, selectedCell.second, std::make_unique<knight>(team, selectedCell, textures[figure]));
                            else if (typeChar == 'r')
                                board->setFigure(selectedCell.first, selectedCell.second, std::make_unique<rook>(team, selectedCell, textures[figure]));
                            else if (typeChar == 'p')
                                board->setFigure(selectedCell.first, selectedCell.second, std::make_unique<pawn>(team, selectedCell, textures[figure]));

                            selectedCell = std::make_pair(-1,-1);
                            cellIsSelected = false;
                            continue;
                        }
                    }
                    
                    for (int x = 0; x<8; x++){
                        for (int y = 0; y<8; y++){
                            if (boardRectangles[x][y].getGlobalBounds().contains(mousePos)){
                                selectedCell=std::make_pair(x,7-y);
                                cellIsSelected = true;
                                choosedCellRect.setPosition(
                                OFFSETX + selectedCell.first * CELLSIZE,
                                OFFSETY + (7 - selectedCell.second) * CELLSIZE);
                                break;
                            }
                        }
                    }
                }
            }
            
            drawBoardAndLabels(window,boardRectangles,letters,numbers);
            if (cellIsSelected)
                window.draw(choosedCellRect);
            drawNextModeButton(window,nextModeBtnShape,font,CELLSIZE,OFFSETX,OFFSETY);
            drawFigures(window,board,CELLSIZE,OFFSETX,OFFSETY);
            if (selectedCell.first!=-1 and selectedCell.second!=-1){
                createChooseFigureMenuCreatePuzzle(window,textures,selectedCell,CELLSIZE,OFFSETX,OFFSETY,container,figureSpritesToChoose,rectanglesToChoose);
                drawChooseFigureMenuCreatePuzzle(window,container,figureSpritesToChoose,rectanglesToChoose);
            }
        }
        else if(currentMode == Game){
            sf::Event event;  // –∫–∞–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–µ–π—á–∞—Å –∫–ª–∏–∫ –º—ã—à–∏ –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–æ
            while (window.pollEvent(event)) { // –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Å–æ–±—ã—Ç–∏–µ –∫–∞–∫–æ–µ —Ç–æ
                handleWindowClose(window, event); // —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã–≤–∞–ª–æ—Å—å –æ–∫–Ω–æ
                if (event.type == sf::Event::MouseButtonPressed && // –Ω–∞–∂–∞—Ç–∏–µ –ª–µ–≤–æ–π –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏
                    event.mouseButton.button == sf::Mouse::Left) {
                    sf::Vector2f mousePos(event.mouseButton.x, event.mouseButton.y); // –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
                    // –µ—Å–ª–∏ –ø–µ—à–∫–∞ –Ω–∞ –∫–ª–µ—Ç–∫–µ –¥–ª—è –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è
                    if (nextModeBtnShape.getGlobalBounds().contains(mousePos)){
                        delete board;
                        createMainMenu(window,font);
                    }
                    if (board->convertFlag){
                        selectFigureToConvert(board, rectangles_to_choose, mousePos, textures, OFFSETX, CELLSIZE); // –≤—ã–±–∏—Ä–∞–µ–º –∏ –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º
                        return;
                    }
                    if (!isFigureSelected) { // –µ—Å–ª–∏ —Ñ–∏–≥—É—Ä–∞ –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞
                        selectFigure(mousePos, board, // –ø—ã—Ç–∞–µ–º—Å—è –≤—ã–±—Ä–∞—Ç—å —Ñ–∏–≥—É—Ä—É –ø–æ –≤—Å–µ–º —Ñ–∏–≥—É—Ä–∞–º –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –∏ —Å–º–æ—Ç—Ä–∏–º (—É–±—Ä–∞–Ω–æ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é)
                                    isFigureSelected, selectedFigure,
                                    possibleMoves);
                    } else { // –µ—Å–ª–∏ —É–∂–µ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ —Ñ–∏–≥—É—Ä–∞ —Ä–∞–Ω–µ–µ
                        bool moved = applyMoveIfValid(  // –¥–≤–∏–≥–∞–µ–º —Ñ–∏–≥—É—Ä—É –Ω–∞ –∫–ª–µ—Ç–∫—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —â–µ–ª–∫–Ω—É–ª–∏ –ø–µ—Ä–µ–¥–≤–∏–≥–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥
                            mousePos, board,
                            selectedFigure, possibleMoves,
                            lastMoveFrom, lastMoveTo,
                            hasMoved, OFFSETX,
                            OFFSETY, CELLSIZE
                        );

                        if (moved) { // –µ—Å–ª–∏ –ø–æ—Ö–æ–¥–∏–ª–∏ —Ç–æ–µ—Å—Ç—å applyMoveifValid –≤–µ—Ä–Ω—É–ª–æ true
                            isFigureSelected = false; // —Ñ–∏–≥—É—Ä–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞
                            selectedFigure = nullptr; 
                            possibleMoves.clear(); // –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ö–æ–¥–æ–≤ –Ω–µ—Ç
                            //TODO —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
                        } else { // –µ—Å–ª–∏ –¥–≤–∏–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ —Ç–æ–µ—Å—Ç—å –∫–ª–∏–∫ –±—ã–ª –Ω–µ –ø–æ –∫–ª–µ—Ç–∫–µ –∞ –ø–æ —Ñ–∏–≥—É—Ä–µ –∏–ª–∏ –≤–æ–æ–±—â–µ –≤–Ω–µ –ø–æ–ª—è
                            updateSelectionOnMissClick( // –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ñ–∏–≥—É—Ä—ã –≤–¥—Ä—É–≥ –ø–æ –Ω–∏–º –∫–ª–∏–∫–Ω—É–ª–∏
                                mousePos, board,
                                selectedFigure, possibleMoves
                            );
                        }
                    }
                }
            }

            window.clear(sf::Color(128,128,128)); // –æ—Ç—á–∏—â–∞–µ–º –æ–∫–Ω–æ —á—Ç–æ–±—ã –æ–Ω–æ –æ–±–Ω–æ–≤–ª—è–ª–æ—Å—å —Ü–≤–µ—Ç –≤ —Å–∫–æ–±–∫–∞—Ö —ç—Ç–æ —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ (—Å–µ—Ä—ã–π)

            drawBoardAndLabels(window, boardRectangles, letters, numbers); // —Ä–∏—Å—É–µ–º –¥–æ—Å–∫—É –∏ —Ü–∏—Ñ—Ä—ã –±—É–∫–≤—ã
            if (hasMoved) { // –µ—Å–ª–∏ —Ö–æ–¥ –±—ã–ª —Ä–∏—Å—É–µ–º –∑–µ–ª–µ–Ω—ã–µ –∫–≤–∞–¥—Ä–∞—Ç—ã –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ö–æ–¥—É
                window.draw(lastMoveFrom);
                window.draw(lastMoveTo);
            }
            if (board->isKingInCheck(figure::BLACK)){ // –µ—Å–ª–∏ –∫–∞–∫–æ–º—É –Ω–∏–±—É–¥—å –∫–æ—Ä–æ–ª—é —Å—Ç–æ–∏—Ç —à–∞—Ö –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∫—Ä–∞—Å–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç –Ω–∞ –Ω–µ–º
                drawCheck(window,board,figure::BLACK,OFFSETX,OFFSETY,CELLSIZE);
            }else if(board->isKingInCheck(figure::WHITE)){
                drawCheck(window,board,figure::WHITE,OFFSETX,OFFSETY,CELLSIZE);
            }

            drawFigures(window, board, CELLSIZE, OFFSETX, OFFSETY); // —Ä–∏—Å—É–µ–º —Ñ–∏–≥—É—Ä—ã

            if (isFigureSelected) { // –µ—Å–ª–∏ —Ñ–∏–≥—É—Ä–∞ –≤—ã–±—Ä–∞–Ω–∞
                drawMoveHighlights(window, possibleMoves, *board, selectedFigure, OFFSETX, OFFSETY, CELLSIZE); // —Ä–∏—Å—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã
            }

            if (board->convertFlag){ // –µ—Å–ª–∏ –ø–µ—à–∫–∞ –Ω–∞ –∫–ª–µ—Ç–∫–µ –¥–ª—è –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è
                createChoiceMenu(board, to_choose, rectangles_to_choose, textures, OFFSETX, OFFSETY, CELLSIZE); // —Å–æ–∑–¥–∞–µ–º –∏ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
                drawChoiceMenu(window, to_choose, rectangles_to_choose);
            }
            
            drawNextModeButton(window,nextModeBtnShape,font,CELLSIZE,OFFSETX,OFFSETY);
        }
        window.display(); // –ø–æ–∫–∞–∑—ã–≤–∞–ª–æ—Å—å –æ–∫–Ω–æ —á—Ç–æ–±—ã
    }
    delete board; // –æ—Ç—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –æ—Ç —Ç–≤–æ–µ–π –¥–æ—Å–∫–∏ üò•üò•üò£üò£üò•
}
    